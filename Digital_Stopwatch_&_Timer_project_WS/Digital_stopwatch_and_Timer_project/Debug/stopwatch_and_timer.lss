
stopwatch_and_timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021e8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000021e8  0000227c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  00800068  00800068  00002284  2**0
                  ALLOC
  3 .stab         0000174c  00000000  00000000  00002284  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000093a  00000000  00000000  000039d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000430a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000444a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000045ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00006203  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000070ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00007e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00007ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00008289  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008a57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0c 10 	jmp	0x2018	; 0x2018 <__vector_1>
       8:	0c 94 4a 10 	jmp	0x2094	; 0x2094 <__vector_2>
       c:	0c 94 8e 10 	jmp	0x211c	; 0x211c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 dd 0e 	jmp	0x1dba	; 0x1dba <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a6 37       	cpi	r26, 0x76	; 118
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e8 ee       	ldi	r30, 0xE8	; 232
      78:	f1 e2       	ldi	r31, 0x21	; 33
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 f2 10 	jmp	0x21e4	; 0x21e4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e3 10 	jmp	0x21c6	; 0x21c6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e3 10 	jmp	0x21c6	; 0x21c6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 bb 10 	jmp	0x2176	; 0x2176 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d7 10 	jmp	0x21ae	; 0x21ae <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 e3 10 	jmp	0x21c6	; 0x21c6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 e3 10 	jmp	0x21c6	; 0x21c6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 c7 10 	jmp	0x218e	; 0x218e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 e3 10 	jmp	0x21c6	; 0x21c6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 cb 10 	jmp	0x2196	; 0x2196 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 e7 10 	jmp	0x21ce	; 0x21ce <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
unsigned char sec = 0 , sec_digit1 = 0 , sec_digit2 = 0;
unsigned char min = 0 , min_digit1 = 0 , min_digit2 = 0;
unsigned char hr = 0 ,hr_digit1 = 0 , hr_digit2 = 0;

int main(void)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c2 56       	subi	r28, 0x62	; 98
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	//Intializations
	Timer1_CTC_Init();
     b60:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <Timer1_CTC_Init>
	Alarm_Init();
     b64:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <Alarm_Init>
	Toggle_mode_Init();
     b68:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <Toggle_mode_Init>
	LED_Init();
     b6c:	0e 94 64 0f 	call	0x1ec8	; 0x1ec8 <LED_Init>
	INT0_Init();              // Enable external INT0 (reset)
     b70:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <INT0_Init>
	INT1_Init();              // Enable external INT1 (pause)
     b74:	0e 94 2e 10 	call	0x205c	; 0x205c <INT1_Init>
	INT2_Init();              // Enable external INT1 (Resume)
     b78:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <INT2_Init>
	Time_Adjustment();
     b7c:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <Time_Adjustment>
	Init_sevensegment();
     b80:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <Init_sevensegment>

	SREG|=(1<<7);
     b84:	af e5       	ldi	r26, 0x5F	; 95
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	ef e5       	ldi	r30, 0x5F	; 95
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	80 81       	ld	r24, Z
     b8e:	80 68       	ori	r24, 0x80	; 128
     b90:	8c 93       	st	X, r24

    while(1)
    {
    	if(!(PINB & (1<<PB7)))
     b92:	e6 e3       	ldi	r30, 0x36	; 54
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	88 23       	and	r24, r24
     b9a:	0c f4       	brge	.+2      	; 0xb9e <main+0x58>
     b9c:	d7 c0       	rjmp	.+430    	; 0xd4c <main+0x206>
     b9e:	fe 01       	movw	r30, r28
     ba0:	e1 5a       	subi	r30, 0xA1	; 161
     ba2:	ff 4f       	sbci	r31, 0xFF	; 255
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	a0 e7       	ldi	r26, 0x70	; 112
     baa:	b1 e4       	ldi	r27, 0x41	; 65
     bac:	80 83       	st	Z, r24
     bae:	91 83       	std	Z+1, r25	; 0x01
     bb0:	a2 83       	std	Z+2, r26	; 0x02
     bb2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bb4:	8e 01       	movw	r16, r28
     bb6:	05 5a       	subi	r16, 0xA5	; 165
     bb8:	1f 4f       	sbci	r17, 0xFF	; 255
     bba:	fe 01       	movw	r30, r28
     bbc:	e1 5a       	subi	r30, 0xA1	; 161
     bbe:	ff 4f       	sbci	r31, 0xFF	; 255
     bc0:	60 81       	ld	r22, Z
     bc2:	71 81       	ldd	r23, Z+1	; 0x01
     bc4:	82 81       	ldd	r24, Z+2	; 0x02
     bc6:	93 81       	ldd	r25, Z+3	; 0x03
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	4a e7       	ldi	r20, 0x7A	; 122
     bce:	55 e4       	ldi	r21, 0x45	; 69
     bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bd4:	dc 01       	movw	r26, r24
     bd6:	cb 01       	movw	r24, r22
     bd8:	f8 01       	movw	r30, r16
     bda:	80 83       	st	Z, r24
     bdc:	91 83       	std	Z+1, r25	; 0x01
     bde:	a2 83       	std	Z+2, r26	; 0x02
     be0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     be2:	fe 01       	movw	r30, r28
     be4:	e5 5a       	subi	r30, 0xA5	; 165
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	60 81       	ld	r22, Z
     bea:	71 81       	ldd	r23, Z+1	; 0x01
     bec:	82 81       	ldd	r24, Z+2	; 0x02
     bee:	93 81       	ldd	r25, Z+3	; 0x03
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	40 e8       	ldi	r20, 0x80	; 128
     bf6:	5f e3       	ldi	r21, 0x3F	; 63
     bf8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bfc:	88 23       	and	r24, r24
     bfe:	44 f4       	brge	.+16     	; 0xc10 <main+0xca>
		__ticks = 1;
     c00:	fe 01       	movw	r30, r28
     c02:	e7 5a       	subi	r30, 0xA7	; 167
     c04:	ff 4f       	sbci	r31, 0xFF	; 255
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	91 83       	std	Z+1, r25	; 0x01
     c0c:	80 83       	st	Z, r24
     c0e:	64 c0       	rjmp	.+200    	; 0xcd8 <main+0x192>
	else if (__tmp > 65535)
     c10:	fe 01       	movw	r30, r28
     c12:	e5 5a       	subi	r30, 0xA5	; 165
     c14:	ff 4f       	sbci	r31, 0xFF	; 255
     c16:	60 81       	ld	r22, Z
     c18:	71 81       	ldd	r23, Z+1	; 0x01
     c1a:	82 81       	ldd	r24, Z+2	; 0x02
     c1c:	93 81       	ldd	r25, Z+3	; 0x03
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	3f ef       	ldi	r19, 0xFF	; 255
     c22:	4f e7       	ldi	r20, 0x7F	; 127
     c24:	57 e4       	ldi	r21, 0x47	; 71
     c26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c2a:	18 16       	cp	r1, r24
     c2c:	0c f0       	brlt	.+2      	; 0xc30 <main+0xea>
     c2e:	43 c0       	rjmp	.+134    	; 0xcb6 <main+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c30:	fe 01       	movw	r30, r28
     c32:	e1 5a       	subi	r30, 0xA1	; 161
     c34:	ff 4f       	sbci	r31, 0xFF	; 255
     c36:	60 81       	ld	r22, Z
     c38:	71 81       	ldd	r23, Z+1	; 0x01
     c3a:	82 81       	ldd	r24, Z+2	; 0x02
     c3c:	93 81       	ldd	r25, Z+3	; 0x03
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	40 e2       	ldi	r20, 0x20	; 32
     c44:	51 e4       	ldi	r21, 0x41	; 65
     c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	8e 01       	movw	r16, r28
     c50:	07 5a       	subi	r16, 0xA7	; 167
     c52:	1f 4f       	sbci	r17, 0xFF	; 255
     c54:	bc 01       	movw	r22, r24
     c56:	cd 01       	movw	r24, r26
     c58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c5c:	dc 01       	movw	r26, r24
     c5e:	cb 01       	movw	r24, r22
     c60:	f8 01       	movw	r30, r16
     c62:	91 83       	std	Z+1, r25	; 0x01
     c64:	80 83       	st	Z, r24
     c66:	1f c0       	rjmp	.+62     	; 0xca6 <main+0x160>
     c68:	fe 01       	movw	r30, r28
     c6a:	e9 5a       	subi	r30, 0xA9	; 169
     c6c:	ff 4f       	sbci	r31, 0xFF	; 255
     c6e:	80 e9       	ldi	r24, 0x90	; 144
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	91 83       	std	Z+1, r25	; 0x01
     c74:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c76:	fe 01       	movw	r30, r28
     c78:	e9 5a       	subi	r30, 0xA9	; 169
     c7a:	ff 4f       	sbci	r31, 0xFF	; 255
     c7c:	80 81       	ld	r24, Z
     c7e:	91 81       	ldd	r25, Z+1	; 0x01
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	f1 f7       	brne	.-4      	; 0xc80 <main+0x13a>
     c84:	fe 01       	movw	r30, r28
     c86:	e9 5a       	subi	r30, 0xA9	; 169
     c88:	ff 4f       	sbci	r31, 0xFF	; 255
     c8a:	91 83       	std	Z+1, r25	; 0x01
     c8c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c8e:	de 01       	movw	r26, r28
     c90:	a7 5a       	subi	r26, 0xA7	; 167
     c92:	bf 4f       	sbci	r27, 0xFF	; 255
     c94:	fe 01       	movw	r30, r28
     c96:	e7 5a       	subi	r30, 0xA7	; 167
     c98:	ff 4f       	sbci	r31, 0xFF	; 255
     c9a:	80 81       	ld	r24, Z
     c9c:	91 81       	ldd	r25, Z+1	; 0x01
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	11 96       	adiw	r26, 0x01	; 1
     ca2:	9c 93       	st	X, r25
     ca4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ca6:	fe 01       	movw	r30, r28
     ca8:	e7 5a       	subi	r30, 0xA7	; 167
     caa:	ff 4f       	sbci	r31, 0xFF	; 255
     cac:	80 81       	ld	r24, Z
     cae:	91 81       	ldd	r25, Z+1	; 0x01
     cb0:	00 97       	sbiw	r24, 0x00	; 0
     cb2:	d1 f6       	brne	.-76     	; 0xc68 <main+0x122>
     cb4:	28 c0       	rjmp	.+80     	; 0xd06 <main+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cb6:	8e 01       	movw	r16, r28
     cb8:	07 5a       	subi	r16, 0xA7	; 167
     cba:	1f 4f       	sbci	r17, 0xFF	; 255
     cbc:	fe 01       	movw	r30, r28
     cbe:	e5 5a       	subi	r30, 0xA5	; 165
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	60 81       	ld	r22, Z
     cc4:	71 81       	ldd	r23, Z+1	; 0x01
     cc6:	82 81       	ldd	r24, Z+2	; 0x02
     cc8:	93 81       	ldd	r25, Z+3	; 0x03
     cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cce:	dc 01       	movw	r26, r24
     cd0:	cb 01       	movw	r24, r22
     cd2:	f8 01       	movw	r30, r16
     cd4:	91 83       	std	Z+1, r25	; 0x01
     cd6:	80 83       	st	Z, r24
     cd8:	de 01       	movw	r26, r28
     cda:	ab 5a       	subi	r26, 0xAB	; 171
     cdc:	bf 4f       	sbci	r27, 0xFF	; 255
     cde:	fe 01       	movw	r30, r28
     ce0:	e7 5a       	subi	r30, 0xA7	; 167
     ce2:	ff 4f       	sbci	r31, 0xFF	; 255
     ce4:	80 81       	ld	r24, Z
     ce6:	91 81       	ldd	r25, Z+1	; 0x01
     ce8:	11 96       	adiw	r26, 0x01	; 1
     cea:	9c 93       	st	X, r25
     cec:	8e 93       	st	-X, r24
     cee:	fe 01       	movw	r30, r28
     cf0:	eb 5a       	subi	r30, 0xAB	; 171
     cf2:	ff 4f       	sbci	r31, 0xFF	; 255
     cf4:	80 81       	ld	r24, Z
     cf6:	91 81       	ldd	r25, Z+1	; 0x01
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	f1 f7       	brne	.-4      	; 0xcf8 <main+0x1b2>
     cfc:	fe 01       	movw	r30, r28
     cfe:	eb 5a       	subi	r30, 0xAB	; 171
     d00:	ff 4f       	sbci	r31, 0xFF	; 255
     d02:	91 83       	std	Z+1, r25	; 0x01
     d04:	80 83       	st	Z, r24
    	{
    		_delay_ms(15);
    		if(!(PINB & (1<<PB7)))
     d06:	e6 e3       	ldi	r30, 0x36	; 54
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	88 23       	and	r24, r24
     d0e:	04 f1       	brlt	.+64     	; 0xd50 <main+0x20a>
    		{
    			if(flag==0)
     d10:	80 91 69 00 	lds	r24, 0x0069
     d14:	88 23       	and	r24, r24
     d16:	e1 f4       	brne	.+56     	; 0xd50 <main+0x20a>
    			{
    			    flag3^=1;
     d18:	90 91 6c 00 	lds	r25, 0x006C
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	89 27       	eor	r24, r25
     d20:	80 93 6c 00 	sts	0x006C, r24
    			    PORTD^=(1<<PD4);  //RED Led
     d24:	a2 e3       	ldi	r26, 0x32	; 50
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e2 e3       	ldi	r30, 0x32	; 50
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	90 81       	ld	r25, Z
     d2e:	80 e1       	ldi	r24, 0x10	; 16
     d30:	89 27       	eor	r24, r25
     d32:	8c 93       	st	X, r24
    			    PORTD^=(1<<PD5); //YELLOW Led
     d34:	a2 e3       	ldi	r26, 0x32	; 50
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	e2 e3       	ldi	r30, 0x32	; 50
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	90 81       	ld	r25, Z
     d3e:	80 e2       	ldi	r24, 0x20	; 32
     d40:	89 27       	eor	r24, r25
     d42:	8c 93       	st	X, r24
    			    flag=1;
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	80 93 69 00 	sts	0x0069, r24
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <main+0x20a>
    			}
    		}
    	}
    	else
    	{
    		flag=0;
     d4c:	10 92 69 00 	sts	0x0069, r1
    	}
    	Decrement_Mode();
     d50:	0e 94 42 0c 	call	0x1884	; 0x1884 <Decrement_Mode>
    	Increment_Mode();
     d54:	0e 94 40 0a 	call	0x1480	; 0x1480 <Increment_Mode>

    	sec_digit2=sec/10;
     d58:	80 91 6d 00 	lds	r24, 0x006D
     d5c:	9a e0       	ldi	r25, 0x0A	; 10
     d5e:	69 2f       	mov	r22, r25
     d60:	0e 94 af 10 	call	0x215e	; 0x215e <__udivmodqi4>
     d64:	80 93 6f 00 	sts	0x006F, r24
    	sec_digit1=sec % 10;
     d68:	80 91 6d 00 	lds	r24, 0x006D
     d6c:	9a e0       	ldi	r25, 0x0A	; 10
     d6e:	69 2f       	mov	r22, r25
     d70:	0e 94 af 10 	call	0x215e	; 0x215e <__udivmodqi4>
     d74:	89 2f       	mov	r24, r25
     d76:	80 93 6e 00 	sts	0x006E, r24

    	min_digit2=min/10;
     d7a:	80 91 70 00 	lds	r24, 0x0070
     d7e:	9a e0       	ldi	r25, 0x0A	; 10
     d80:	69 2f       	mov	r22, r25
     d82:	0e 94 af 10 	call	0x215e	; 0x215e <__udivmodqi4>
     d86:	80 93 72 00 	sts	0x0072, r24
   		min_digit1=min % 10;
     d8a:	80 91 70 00 	lds	r24, 0x0070
     d8e:	9a e0       	ldi	r25, 0x0A	; 10
     d90:	69 2f       	mov	r22, r25
     d92:	0e 94 af 10 	call	0x215e	; 0x215e <__udivmodqi4>
     d96:	89 2f       	mov	r24, r25
     d98:	80 93 71 00 	sts	0x0071, r24

   		hr_digit2=hr/10;
     d9c:	80 91 73 00 	lds	r24, 0x0073
     da0:	9a e0       	ldi	r25, 0x0A	; 10
     da2:	69 2f       	mov	r22, r25
     da4:	0e 94 af 10 	call	0x215e	; 0x215e <__udivmodqi4>
     da8:	80 93 75 00 	sts	0x0075, r24
   		hr_digit1=hr % 10;
     dac:	80 91 73 00 	lds	r24, 0x0073
     db0:	9a e0       	ldi	r25, 0x0A	; 10
     db2:	69 2f       	mov	r22, r25
     db4:	0e 94 af 10 	call	0x215e	; 0x215e <__udivmodqi4>
     db8:	89 2f       	mov	r24, r25
     dba:	80 93 74 00 	sts	0x0074, r24

    	PORTA=(1<<PA5);
     dbe:	eb e3       	ldi	r30, 0x3B	; 59
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 e2       	ldi	r24, 0x20	; 32
     dc4:	80 83       	st	Z, r24
    	PORTC = (PORTC & 0xF0) | (sec_digit1 & 0x0F);
     dc6:	a5 e3       	ldi	r26, 0x35	; 53
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	e5 e3       	ldi	r30, 0x35	; 53
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	80 81       	ld	r24, Z
     dd0:	98 2f       	mov	r25, r24
     dd2:	90 7f       	andi	r25, 0xF0	; 240
     dd4:	80 91 6e 00 	lds	r24, 0x006E
     dd8:	8f 70       	andi	r24, 0x0F	; 15
     dda:	89 2b       	or	r24, r25
     ddc:	8c 93       	st	X, r24
     dde:	fe 01       	movw	r30, r28
     de0:	ef 5a       	subi	r30, 0xAF	; 175
     de2:	ff 4f       	sbci	r31, 0xFF	; 255
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	a0 e0       	ldi	r26, 0x00	; 0
     dea:	b0 e4       	ldi	r27, 0x40	; 64
     dec:	80 83       	st	Z, r24
     dee:	91 83       	std	Z+1, r25	; 0x01
     df0:	a2 83       	std	Z+2, r26	; 0x02
     df2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     df4:	8e 01       	movw	r16, r28
     df6:	03 5b       	subi	r16, 0xB3	; 179
     df8:	1f 4f       	sbci	r17, 0xFF	; 255
     dfa:	fe 01       	movw	r30, r28
     dfc:	ef 5a       	subi	r30, 0xAF	; 175
     dfe:	ff 4f       	sbci	r31, 0xFF	; 255
     e00:	60 81       	ld	r22, Z
     e02:	71 81       	ldd	r23, Z+1	; 0x01
     e04:	82 81       	ldd	r24, Z+2	; 0x02
     e06:	93 81       	ldd	r25, Z+3	; 0x03
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	4a e7       	ldi	r20, 0x7A	; 122
     e0e:	55 e4       	ldi	r21, 0x45	; 69
     e10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e14:	dc 01       	movw	r26, r24
     e16:	cb 01       	movw	r24, r22
     e18:	f8 01       	movw	r30, r16
     e1a:	80 83       	st	Z, r24
     e1c:	91 83       	std	Z+1, r25	; 0x01
     e1e:	a2 83       	std	Z+2, r26	; 0x02
     e20:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e22:	fe 01       	movw	r30, r28
     e24:	e3 5b       	subi	r30, 0xB3	; 179
     e26:	ff 4f       	sbci	r31, 0xFF	; 255
     e28:	60 81       	ld	r22, Z
     e2a:	71 81       	ldd	r23, Z+1	; 0x01
     e2c:	82 81       	ldd	r24, Z+2	; 0x02
     e2e:	93 81       	ldd	r25, Z+3	; 0x03
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	40 e8       	ldi	r20, 0x80	; 128
     e36:	5f e3       	ldi	r21, 0x3F	; 63
     e38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e3c:	88 23       	and	r24, r24
     e3e:	44 f4       	brge	.+16     	; 0xe50 <main+0x30a>
		__ticks = 1;
     e40:	fe 01       	movw	r30, r28
     e42:	e5 5b       	subi	r30, 0xB5	; 181
     e44:	ff 4f       	sbci	r31, 0xFF	; 255
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	91 83       	std	Z+1, r25	; 0x01
     e4c:	80 83       	st	Z, r24
     e4e:	64 c0       	rjmp	.+200    	; 0xf18 <main+0x3d2>
	else if (__tmp > 65535)
     e50:	fe 01       	movw	r30, r28
     e52:	e3 5b       	subi	r30, 0xB3	; 179
     e54:	ff 4f       	sbci	r31, 0xFF	; 255
     e56:	60 81       	ld	r22, Z
     e58:	71 81       	ldd	r23, Z+1	; 0x01
     e5a:	82 81       	ldd	r24, Z+2	; 0x02
     e5c:	93 81       	ldd	r25, Z+3	; 0x03
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	3f ef       	ldi	r19, 0xFF	; 255
     e62:	4f e7       	ldi	r20, 0x7F	; 127
     e64:	57 e4       	ldi	r21, 0x47	; 71
     e66:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e6a:	18 16       	cp	r1, r24
     e6c:	0c f0       	brlt	.+2      	; 0xe70 <main+0x32a>
     e6e:	43 c0       	rjmp	.+134    	; 0xef6 <main+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e70:	fe 01       	movw	r30, r28
     e72:	ef 5a       	subi	r30, 0xAF	; 175
     e74:	ff 4f       	sbci	r31, 0xFF	; 255
     e76:	60 81       	ld	r22, Z
     e78:	71 81       	ldd	r23, Z+1	; 0x01
     e7a:	82 81       	ldd	r24, Z+2	; 0x02
     e7c:	93 81       	ldd	r25, Z+3	; 0x03
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 e2       	ldi	r20, 0x20	; 32
     e84:	51 e4       	ldi	r21, 0x41	; 65
     e86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e8a:	dc 01       	movw	r26, r24
     e8c:	cb 01       	movw	r24, r22
     e8e:	8e 01       	movw	r16, r28
     e90:	05 5b       	subi	r16, 0xB5	; 181
     e92:	1f 4f       	sbci	r17, 0xFF	; 255
     e94:	bc 01       	movw	r22, r24
     e96:	cd 01       	movw	r24, r26
     e98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	f8 01       	movw	r30, r16
     ea2:	91 83       	std	Z+1, r25	; 0x01
     ea4:	80 83       	st	Z, r24
     ea6:	1f c0       	rjmp	.+62     	; 0xee6 <main+0x3a0>
     ea8:	fe 01       	movw	r30, r28
     eaa:	e7 5b       	subi	r30, 0xB7	; 183
     eac:	ff 4f       	sbci	r31, 0xFF	; 255
     eae:	80 e9       	ldi	r24, 0x90	; 144
     eb0:	91 e0       	ldi	r25, 0x01	; 1
     eb2:	91 83       	std	Z+1, r25	; 0x01
     eb4:	80 83       	st	Z, r24
     eb6:	fe 01       	movw	r30, r28
     eb8:	e7 5b       	subi	r30, 0xB7	; 183
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	80 81       	ld	r24, Z
     ebe:	91 81       	ldd	r25, Z+1	; 0x01
     ec0:	01 97       	sbiw	r24, 0x01	; 1
     ec2:	f1 f7       	brne	.-4      	; 0xec0 <main+0x37a>
     ec4:	fe 01       	movw	r30, r28
     ec6:	e7 5b       	subi	r30, 0xB7	; 183
     ec8:	ff 4f       	sbci	r31, 0xFF	; 255
     eca:	91 83       	std	Z+1, r25	; 0x01
     ecc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ece:	de 01       	movw	r26, r28
     ed0:	a5 5b       	subi	r26, 0xB5	; 181
     ed2:	bf 4f       	sbci	r27, 0xFF	; 255
     ed4:	fe 01       	movw	r30, r28
     ed6:	e5 5b       	subi	r30, 0xB5	; 181
     ed8:	ff 4f       	sbci	r31, 0xFF	; 255
     eda:	80 81       	ld	r24, Z
     edc:	91 81       	ldd	r25, Z+1	; 0x01
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	11 96       	adiw	r26, 0x01	; 1
     ee2:	9c 93       	st	X, r25
     ee4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee6:	fe 01       	movw	r30, r28
     ee8:	e5 5b       	subi	r30, 0xB5	; 181
     eea:	ff 4f       	sbci	r31, 0xFF	; 255
     eec:	80 81       	ld	r24, Z
     eee:	91 81       	ldd	r25, Z+1	; 0x01
     ef0:	00 97       	sbiw	r24, 0x00	; 0
     ef2:	d1 f6       	brne	.-76     	; 0xea8 <main+0x362>
     ef4:	27 c0       	rjmp	.+78     	; 0xf44 <main+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef6:	8e 01       	movw	r16, r28
     ef8:	05 5b       	subi	r16, 0xB5	; 181
     efa:	1f 4f       	sbci	r17, 0xFF	; 255
     efc:	fe 01       	movw	r30, r28
     efe:	e3 5b       	subi	r30, 0xB3	; 179
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	60 81       	ld	r22, Z
     f04:	71 81       	ldd	r23, Z+1	; 0x01
     f06:	82 81       	ldd	r24, Z+2	; 0x02
     f08:	93 81       	ldd	r25, Z+3	; 0x03
     f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f0e:	dc 01       	movw	r26, r24
     f10:	cb 01       	movw	r24, r22
     f12:	f8 01       	movw	r30, r16
     f14:	91 83       	std	Z+1, r25	; 0x01
     f16:	80 83       	st	Z, r24
     f18:	de 01       	movw	r26, r28
     f1a:	a9 5b       	subi	r26, 0xB9	; 185
     f1c:	bf 4f       	sbci	r27, 0xFF	; 255
     f1e:	fe 01       	movw	r30, r28
     f20:	e5 5b       	subi	r30, 0xB5	; 181
     f22:	ff 4f       	sbci	r31, 0xFF	; 255
     f24:	80 81       	ld	r24, Z
     f26:	91 81       	ldd	r25, Z+1	; 0x01
     f28:	8d 93       	st	X+, r24
     f2a:	9c 93       	st	X, r25
     f2c:	fe 01       	movw	r30, r28
     f2e:	e9 5b       	subi	r30, 0xB9	; 185
     f30:	ff 4f       	sbci	r31, 0xFF	; 255
     f32:	80 81       	ld	r24, Z
     f34:	91 81       	ldd	r25, Z+1	; 0x01
     f36:	01 97       	sbiw	r24, 0x01	; 1
     f38:	f1 f7       	brne	.-4      	; 0xf36 <main+0x3f0>
     f3a:	fe 01       	movw	r30, r28
     f3c:	e9 5b       	subi	r30, 0xB9	; 185
     f3e:	ff 4f       	sbci	r31, 0xFF	; 255
     f40:	91 83       	std	Z+1, r25	; 0x01
     f42:	80 83       	st	Z, r24
    	_delay_ms(2);

    	PORTA=(1<<PA4);
     f44:	eb e3       	ldi	r30, 0x3B	; 59
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 e1       	ldi	r24, 0x10	; 16
     f4a:	80 83       	st	Z, r24
    	PORTC = (PORTC & 0xF0) | (sec_digit2 & 0x0F);
     f4c:	a5 e3       	ldi	r26, 0x35	; 53
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e5 e3       	ldi	r30, 0x35	; 53
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	98 2f       	mov	r25, r24
     f58:	90 7f       	andi	r25, 0xF0	; 240
     f5a:	80 91 6f 00 	lds	r24, 0x006F
     f5e:	8f 70       	andi	r24, 0x0F	; 15
     f60:	89 2b       	or	r24, r25
     f62:	8c 93       	st	X, r24
     f64:	fe 01       	movw	r30, r28
     f66:	ed 5b       	subi	r30, 0xBD	; 189
     f68:	ff 4f       	sbci	r31, 0xFF	; 255
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	a0 e0       	ldi	r26, 0x00	; 0
     f70:	b0 e4       	ldi	r27, 0x40	; 64
     f72:	80 83       	st	Z, r24
     f74:	91 83       	std	Z+1, r25	; 0x01
     f76:	a2 83       	std	Z+2, r26	; 0x02
     f78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f7a:	8e 01       	movw	r16, r28
     f7c:	01 5c       	subi	r16, 0xC1	; 193
     f7e:	1f 4f       	sbci	r17, 0xFF	; 255
     f80:	fe 01       	movw	r30, r28
     f82:	ed 5b       	subi	r30, 0xBD	; 189
     f84:	ff 4f       	sbci	r31, 0xFF	; 255
     f86:	60 81       	ld	r22, Z
     f88:	71 81       	ldd	r23, Z+1	; 0x01
     f8a:	82 81       	ldd	r24, Z+2	; 0x02
     f8c:	93 81       	ldd	r25, Z+3	; 0x03
     f8e:	20 e0       	ldi	r18, 0x00	; 0
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	4a e7       	ldi	r20, 0x7A	; 122
     f94:	55 e4       	ldi	r21, 0x45	; 69
     f96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	f8 01       	movw	r30, r16
     fa0:	80 83       	st	Z, r24
     fa2:	91 83       	std	Z+1, r25	; 0x01
     fa4:	a2 83       	std	Z+2, r26	; 0x02
     fa6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     fa8:	fe 01       	movw	r30, r28
     faa:	ff 96       	adiw	r30, 0x3f	; 63
     fac:	60 81       	ld	r22, Z
     fae:	71 81       	ldd	r23, Z+1	; 0x01
     fb0:	82 81       	ldd	r24, Z+2	; 0x02
     fb2:	93 81       	ldd	r25, Z+3	; 0x03
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	40 e8       	ldi	r20, 0x80	; 128
     fba:	5f e3       	ldi	r21, 0x3F	; 63
     fbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fc0:	88 23       	and	r24, r24
     fc2:	2c f4       	brge	.+10     	; 0xfce <main+0x488>
		__ticks = 1;
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	9e af       	std	Y+62, r25	; 0x3e
     fca:	8d af       	std	Y+61, r24	; 0x3d
     fcc:	46 c0       	rjmp	.+140    	; 0x105a <main+0x514>
	else if (__tmp > 65535)
     fce:	fe 01       	movw	r30, r28
     fd0:	ff 96       	adiw	r30, 0x3f	; 63
     fd2:	60 81       	ld	r22, Z
     fd4:	71 81       	ldd	r23, Z+1	; 0x01
     fd6:	82 81       	ldd	r24, Z+2	; 0x02
     fd8:	93 81       	ldd	r25, Z+3	; 0x03
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	3f ef       	ldi	r19, 0xFF	; 255
     fde:	4f e7       	ldi	r20, 0x7F	; 127
     fe0:	57 e4       	ldi	r21, 0x47	; 71
     fe2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fe6:	18 16       	cp	r1, r24
     fe8:	64 f5       	brge	.+88     	; 0x1042 <main+0x4fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fea:	fe 01       	movw	r30, r28
     fec:	ed 5b       	subi	r30, 0xBD	; 189
     fee:	ff 4f       	sbci	r31, 0xFF	; 255
     ff0:	60 81       	ld	r22, Z
     ff2:	71 81       	ldd	r23, Z+1	; 0x01
     ff4:	82 81       	ldd	r24, Z+2	; 0x02
     ff6:	93 81       	ldd	r25, Z+3	; 0x03
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	40 e2       	ldi	r20, 0x20	; 32
     ffe:	51 e4       	ldi	r21, 0x41	; 65
    1000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	bc 01       	movw	r22, r24
    100a:	cd 01       	movw	r24, r26
    100c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	9e af       	std	Y+62, r25	; 0x3e
    1016:	8d af       	std	Y+61, r24	; 0x3d
    1018:	0f c0       	rjmp	.+30     	; 0x1038 <main+0x4f2>
    101a:	80 e9       	ldi	r24, 0x90	; 144
    101c:	91 e0       	ldi	r25, 0x01	; 1
    101e:	9c af       	std	Y+60, r25	; 0x3c
    1020:	8b af       	std	Y+59, r24	; 0x3b
    1022:	8b ad       	ldd	r24, Y+59	; 0x3b
    1024:	9c ad       	ldd	r25, Y+60	; 0x3c
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	f1 f7       	brne	.-4      	; 0x1026 <main+0x4e0>
    102a:	9c af       	std	Y+60, r25	; 0x3c
    102c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    102e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1030:	9e ad       	ldd	r25, Y+62	; 0x3e
    1032:	01 97       	sbiw	r24, 0x01	; 1
    1034:	9e af       	std	Y+62, r25	; 0x3e
    1036:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1038:	8d ad       	ldd	r24, Y+61	; 0x3d
    103a:	9e ad       	ldd	r25, Y+62	; 0x3e
    103c:	00 97       	sbiw	r24, 0x00	; 0
    103e:	69 f7       	brne	.-38     	; 0x101a <main+0x4d4>
    1040:	16 c0       	rjmp	.+44     	; 0x106e <main+0x528>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1042:	fe 01       	movw	r30, r28
    1044:	ff 96       	adiw	r30, 0x3f	; 63
    1046:	60 81       	ld	r22, Z
    1048:	71 81       	ldd	r23, Z+1	; 0x01
    104a:	82 81       	ldd	r24, Z+2	; 0x02
    104c:	93 81       	ldd	r25, Z+3	; 0x03
    104e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1052:	dc 01       	movw	r26, r24
    1054:	cb 01       	movw	r24, r22
    1056:	9e af       	std	Y+62, r25	; 0x3e
    1058:	8d af       	std	Y+61, r24	; 0x3d
    105a:	8d ad       	ldd	r24, Y+61	; 0x3d
    105c:	9e ad       	ldd	r25, Y+62	; 0x3e
    105e:	9a af       	std	Y+58, r25	; 0x3a
    1060:	89 af       	std	Y+57, r24	; 0x39
    1062:	89 ad       	ldd	r24, Y+57	; 0x39
    1064:	9a ad       	ldd	r25, Y+58	; 0x3a
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	f1 f7       	brne	.-4      	; 0x1066 <main+0x520>
    106a:	9a af       	std	Y+58, r25	; 0x3a
    106c:	89 af       	std	Y+57, r24	; 0x39
       	_delay_ms(2);

       	PORTA=(1<<PA3);
    106e:	eb e3       	ldi	r30, 0x3B	; 59
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	88 e0       	ldi	r24, 0x08	; 8
    1074:	80 83       	st	Z, r24
       	PORTC = (PORTC & 0xF0) | (min_digit1 & 0x0F);
    1076:	a5 e3       	ldi	r26, 0x35	; 53
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e5 e3       	ldi	r30, 0x35	; 53
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	98 2f       	mov	r25, r24
    1082:	90 7f       	andi	r25, 0xF0	; 240
    1084:	80 91 71 00 	lds	r24, 0x0071
    1088:	8f 70       	andi	r24, 0x0F	; 15
    108a:	89 2b       	or	r24, r25
    108c:	8c 93       	st	X, r24
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	a0 e0       	ldi	r26, 0x00	; 0
    1094:	b0 e4       	ldi	r27, 0x40	; 64
    1096:	8d ab       	std	Y+53, r24	; 0x35
    1098:	9e ab       	std	Y+54, r25	; 0x36
    109a:	af ab       	std	Y+55, r26	; 0x37
    109c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    109e:	6d a9       	ldd	r22, Y+53	; 0x35
    10a0:	7e a9       	ldd	r23, Y+54	; 0x36
    10a2:	8f a9       	ldd	r24, Y+55	; 0x37
    10a4:	98 ad       	ldd	r25, Y+56	; 0x38
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	4a e7       	ldi	r20, 0x7A	; 122
    10ac:	55 e4       	ldi	r21, 0x45	; 69
    10ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b2:	dc 01       	movw	r26, r24
    10b4:	cb 01       	movw	r24, r22
    10b6:	89 ab       	std	Y+49, r24	; 0x31
    10b8:	9a ab       	std	Y+50, r25	; 0x32
    10ba:	ab ab       	std	Y+51, r26	; 0x33
    10bc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    10be:	69 a9       	ldd	r22, Y+49	; 0x31
    10c0:	7a a9       	ldd	r23, Y+50	; 0x32
    10c2:	8b a9       	ldd	r24, Y+51	; 0x33
    10c4:	9c a9       	ldd	r25, Y+52	; 0x34
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	40 e8       	ldi	r20, 0x80	; 128
    10cc:	5f e3       	ldi	r21, 0x3F	; 63
    10ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10d2:	88 23       	and	r24, r24
    10d4:	2c f4       	brge	.+10     	; 0x10e0 <main+0x59a>
		__ticks = 1;
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	98 ab       	std	Y+48, r25	; 0x30
    10dc:	8f a7       	std	Y+47, r24	; 0x2f
    10de:	3f c0       	rjmp	.+126    	; 0x115e <main+0x618>
	else if (__tmp > 65535)
    10e0:	69 a9       	ldd	r22, Y+49	; 0x31
    10e2:	7a a9       	ldd	r23, Y+50	; 0x32
    10e4:	8b a9       	ldd	r24, Y+51	; 0x33
    10e6:	9c a9       	ldd	r25, Y+52	; 0x34
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	3f ef       	ldi	r19, 0xFF	; 255
    10ec:	4f e7       	ldi	r20, 0x7F	; 127
    10ee:	57 e4       	ldi	r21, 0x47	; 71
    10f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10f4:	18 16       	cp	r1, r24
    10f6:	4c f5       	brge	.+82     	; 0x114a <main+0x604>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f8:	6d a9       	ldd	r22, Y+53	; 0x35
    10fa:	7e a9       	ldd	r23, Y+54	; 0x36
    10fc:	8f a9       	ldd	r24, Y+55	; 0x37
    10fe:	98 ad       	ldd	r25, Y+56	; 0x38
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	40 e2       	ldi	r20, 0x20	; 32
    1106:	51 e4       	ldi	r21, 0x41	; 65
    1108:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110c:	dc 01       	movw	r26, r24
    110e:	cb 01       	movw	r24, r22
    1110:	bc 01       	movw	r22, r24
    1112:	cd 01       	movw	r24, r26
    1114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	98 ab       	std	Y+48, r25	; 0x30
    111e:	8f a7       	std	Y+47, r24	; 0x2f
    1120:	0f c0       	rjmp	.+30     	; 0x1140 <main+0x5fa>
    1122:	80 e9       	ldi	r24, 0x90	; 144
    1124:	91 e0       	ldi	r25, 0x01	; 1
    1126:	9e a7       	std	Y+46, r25	; 0x2e
    1128:	8d a7       	std	Y+45, r24	; 0x2d
    112a:	8d a5       	ldd	r24, Y+45	; 0x2d
    112c:	9e a5       	ldd	r25, Y+46	; 0x2e
    112e:	01 97       	sbiw	r24, 0x01	; 1
    1130:	f1 f7       	brne	.-4      	; 0x112e <main+0x5e8>
    1132:	9e a7       	std	Y+46, r25	; 0x2e
    1134:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1136:	8f a5       	ldd	r24, Y+47	; 0x2f
    1138:	98 a9       	ldd	r25, Y+48	; 0x30
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	98 ab       	std	Y+48, r25	; 0x30
    113e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1140:	8f a5       	ldd	r24, Y+47	; 0x2f
    1142:	98 a9       	ldd	r25, Y+48	; 0x30
    1144:	00 97       	sbiw	r24, 0x00	; 0
    1146:	69 f7       	brne	.-38     	; 0x1122 <main+0x5dc>
    1148:	14 c0       	rjmp	.+40     	; 0x1172 <main+0x62c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    114a:	69 a9       	ldd	r22, Y+49	; 0x31
    114c:	7a a9       	ldd	r23, Y+50	; 0x32
    114e:	8b a9       	ldd	r24, Y+51	; 0x33
    1150:	9c a9       	ldd	r25, Y+52	; 0x34
    1152:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1156:	dc 01       	movw	r26, r24
    1158:	cb 01       	movw	r24, r22
    115a:	98 ab       	std	Y+48, r25	; 0x30
    115c:	8f a7       	std	Y+47, r24	; 0x2f
    115e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1160:	98 a9       	ldd	r25, Y+48	; 0x30
    1162:	9c a7       	std	Y+44, r25	; 0x2c
    1164:	8b a7       	std	Y+43, r24	; 0x2b
    1166:	8b a5       	ldd	r24, Y+43	; 0x2b
    1168:	9c a5       	ldd	r25, Y+44	; 0x2c
    116a:	01 97       	sbiw	r24, 0x01	; 1
    116c:	f1 f7       	brne	.-4      	; 0x116a <main+0x624>
    116e:	9c a7       	std	Y+44, r25	; 0x2c
    1170:	8b a7       	std	Y+43, r24	; 0x2b
       	_delay_ms(2);

       	PORTA=(1<<PA2);
    1172:	eb e3       	ldi	r30, 0x3B	; 59
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	84 e0       	ldi	r24, 0x04	; 4
    1178:	80 83       	st	Z, r24
       	PORTC = (PORTC & 0xF0) | (min_digit2 & 0x0F);
    117a:	a5 e3       	ldi	r26, 0x35	; 53
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e5 e3       	ldi	r30, 0x35	; 53
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	98 2f       	mov	r25, r24
    1186:	90 7f       	andi	r25, 0xF0	; 240
    1188:	80 91 72 00 	lds	r24, 0x0072
    118c:	8f 70       	andi	r24, 0x0F	; 15
    118e:	89 2b       	or	r24, r25
    1190:	8c 93       	st	X, r24
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	a0 e0       	ldi	r26, 0x00	; 0
    1198:	b0 e4       	ldi	r27, 0x40	; 64
    119a:	8f a3       	std	Y+39, r24	; 0x27
    119c:	98 a7       	std	Y+40, r25	; 0x28
    119e:	a9 a7       	std	Y+41, r26	; 0x29
    11a0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a2:	6f a1       	ldd	r22, Y+39	; 0x27
    11a4:	78 a5       	ldd	r23, Y+40	; 0x28
    11a6:	89 a5       	ldd	r24, Y+41	; 0x29
    11a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	30 e0       	ldi	r19, 0x00	; 0
    11ae:	4a e7       	ldi	r20, 0x7A	; 122
    11b0:	55 e4       	ldi	r21, 0x45	; 69
    11b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11b6:	dc 01       	movw	r26, r24
    11b8:	cb 01       	movw	r24, r22
    11ba:	8b a3       	std	Y+35, r24	; 0x23
    11bc:	9c a3       	std	Y+36, r25	; 0x24
    11be:	ad a3       	std	Y+37, r26	; 0x25
    11c0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    11c2:	6b a1       	ldd	r22, Y+35	; 0x23
    11c4:	7c a1       	ldd	r23, Y+36	; 0x24
    11c6:	8d a1       	ldd	r24, Y+37	; 0x25
    11c8:	9e a1       	ldd	r25, Y+38	; 0x26
    11ca:	20 e0       	ldi	r18, 0x00	; 0
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	40 e8       	ldi	r20, 0x80	; 128
    11d0:	5f e3       	ldi	r21, 0x3F	; 63
    11d2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11d6:	88 23       	and	r24, r24
    11d8:	2c f4       	brge	.+10     	; 0x11e4 <main+0x69e>
		__ticks = 1;
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	9a a3       	std	Y+34, r25	; 0x22
    11e0:	89 a3       	std	Y+33, r24	; 0x21
    11e2:	3f c0       	rjmp	.+126    	; 0x1262 <main+0x71c>
	else if (__tmp > 65535)
    11e4:	6b a1       	ldd	r22, Y+35	; 0x23
    11e6:	7c a1       	ldd	r23, Y+36	; 0x24
    11e8:	8d a1       	ldd	r24, Y+37	; 0x25
    11ea:	9e a1       	ldd	r25, Y+38	; 0x26
    11ec:	20 e0       	ldi	r18, 0x00	; 0
    11ee:	3f ef       	ldi	r19, 0xFF	; 255
    11f0:	4f e7       	ldi	r20, 0x7F	; 127
    11f2:	57 e4       	ldi	r21, 0x47	; 71
    11f4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11f8:	18 16       	cp	r1, r24
    11fa:	4c f5       	brge	.+82     	; 0x124e <main+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11fc:	6f a1       	ldd	r22, Y+39	; 0x27
    11fe:	78 a5       	ldd	r23, Y+40	; 0x28
    1200:	89 a5       	ldd	r24, Y+41	; 0x29
    1202:	9a a5       	ldd	r25, Y+42	; 0x2a
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	40 e2       	ldi	r20, 0x20	; 32
    120a:	51 e4       	ldi	r21, 0x41	; 65
    120c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	bc 01       	movw	r22, r24
    1216:	cd 01       	movw	r24, r26
    1218:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	9a a3       	std	Y+34, r25	; 0x22
    1222:	89 a3       	std	Y+33, r24	; 0x21
    1224:	0f c0       	rjmp	.+30     	; 0x1244 <main+0x6fe>
    1226:	80 e9       	ldi	r24, 0x90	; 144
    1228:	91 e0       	ldi	r25, 0x01	; 1
    122a:	98 a3       	std	Y+32, r25	; 0x20
    122c:	8f 8f       	std	Y+31, r24	; 0x1f
    122e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1230:	98 a1       	ldd	r25, Y+32	; 0x20
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	f1 f7       	brne	.-4      	; 0x1232 <main+0x6ec>
    1236:	98 a3       	std	Y+32, r25	; 0x20
    1238:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    123a:	89 a1       	ldd	r24, Y+33	; 0x21
    123c:	9a a1       	ldd	r25, Y+34	; 0x22
    123e:	01 97       	sbiw	r24, 0x01	; 1
    1240:	9a a3       	std	Y+34, r25	; 0x22
    1242:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1244:	89 a1       	ldd	r24, Y+33	; 0x21
    1246:	9a a1       	ldd	r25, Y+34	; 0x22
    1248:	00 97       	sbiw	r24, 0x00	; 0
    124a:	69 f7       	brne	.-38     	; 0x1226 <main+0x6e0>
    124c:	14 c0       	rjmp	.+40     	; 0x1276 <main+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    124e:	6b a1       	ldd	r22, Y+35	; 0x23
    1250:	7c a1       	ldd	r23, Y+36	; 0x24
    1252:	8d a1       	ldd	r24, Y+37	; 0x25
    1254:	9e a1       	ldd	r25, Y+38	; 0x26
    1256:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    125a:	dc 01       	movw	r26, r24
    125c:	cb 01       	movw	r24, r22
    125e:	9a a3       	std	Y+34, r25	; 0x22
    1260:	89 a3       	std	Y+33, r24	; 0x21
    1262:	89 a1       	ldd	r24, Y+33	; 0x21
    1264:	9a a1       	ldd	r25, Y+34	; 0x22
    1266:	9e 8f       	std	Y+30, r25	; 0x1e
    1268:	8d 8f       	std	Y+29, r24	; 0x1d
    126a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    126c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	f1 f7       	brne	.-4      	; 0x126e <main+0x728>
    1272:	9e 8f       	std	Y+30, r25	; 0x1e
    1274:	8d 8f       	std	Y+29, r24	; 0x1d
       	_delay_ms(2);

       	PORTA=(1<<PA1);
    1276:	eb e3       	ldi	r30, 0x3B	; 59
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	82 e0       	ldi	r24, 0x02	; 2
    127c:	80 83       	st	Z, r24
       	PORTC = (PORTC & 0xF0) | (hr_digit1 & 0x0F);
    127e:	a5 e3       	ldi	r26, 0x35	; 53
    1280:	b0 e0       	ldi	r27, 0x00	; 0
    1282:	e5 e3       	ldi	r30, 0x35	; 53
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	80 81       	ld	r24, Z
    1288:	98 2f       	mov	r25, r24
    128a:	90 7f       	andi	r25, 0xF0	; 240
    128c:	80 91 74 00 	lds	r24, 0x0074
    1290:	8f 70       	andi	r24, 0x0F	; 15
    1292:	89 2b       	or	r24, r25
    1294:	8c 93       	st	X, r24
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	a0 e0       	ldi	r26, 0x00	; 0
    129c:	b0 e4       	ldi	r27, 0x40	; 64
    129e:	89 8f       	std	Y+25, r24	; 0x19
    12a0:	9a 8f       	std	Y+26, r25	; 0x1a
    12a2:	ab 8f       	std	Y+27, r26	; 0x1b
    12a4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a6:	69 8d       	ldd	r22, Y+25	; 0x19
    12a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12ae:	20 e0       	ldi	r18, 0x00	; 0
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	4a e7       	ldi	r20, 0x7A	; 122
    12b4:	55 e4       	ldi	r21, 0x45	; 69
    12b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ba:	dc 01       	movw	r26, r24
    12bc:	cb 01       	movw	r24, r22
    12be:	8d 8b       	std	Y+21, r24	; 0x15
    12c0:	9e 8b       	std	Y+22, r25	; 0x16
    12c2:	af 8b       	std	Y+23, r26	; 0x17
    12c4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12c6:	6d 89       	ldd	r22, Y+21	; 0x15
    12c8:	7e 89       	ldd	r23, Y+22	; 0x16
    12ca:	8f 89       	ldd	r24, Y+23	; 0x17
    12cc:	98 8d       	ldd	r25, Y+24	; 0x18
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e8       	ldi	r20, 0x80	; 128
    12d4:	5f e3       	ldi	r21, 0x3F	; 63
    12d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12da:	88 23       	and	r24, r24
    12dc:	2c f4       	brge	.+10     	; 0x12e8 <main+0x7a2>
		__ticks = 1;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	9c 8b       	std	Y+20, r25	; 0x14
    12e4:	8b 8b       	std	Y+19, r24	; 0x13
    12e6:	3f c0       	rjmp	.+126    	; 0x1366 <main+0x820>
	else if (__tmp > 65535)
    12e8:	6d 89       	ldd	r22, Y+21	; 0x15
    12ea:	7e 89       	ldd	r23, Y+22	; 0x16
    12ec:	8f 89       	ldd	r24, Y+23	; 0x17
    12ee:	98 8d       	ldd	r25, Y+24	; 0x18
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	3f ef       	ldi	r19, 0xFF	; 255
    12f4:	4f e7       	ldi	r20, 0x7F	; 127
    12f6:	57 e4       	ldi	r21, 0x47	; 71
    12f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12fc:	18 16       	cp	r1, r24
    12fe:	4c f5       	brge	.+82     	; 0x1352 <main+0x80c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1300:	69 8d       	ldd	r22, Y+25	; 0x19
    1302:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1304:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1306:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e2       	ldi	r20, 0x20	; 32
    130e:	51 e4       	ldi	r21, 0x41	; 65
    1310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1314:	dc 01       	movw	r26, r24
    1316:	cb 01       	movw	r24, r22
    1318:	bc 01       	movw	r22, r24
    131a:	cd 01       	movw	r24, r26
    131c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1320:	dc 01       	movw	r26, r24
    1322:	cb 01       	movw	r24, r22
    1324:	9c 8b       	std	Y+20, r25	; 0x14
    1326:	8b 8b       	std	Y+19, r24	; 0x13
    1328:	0f c0       	rjmp	.+30     	; 0x1348 <main+0x802>
    132a:	80 e9       	ldi	r24, 0x90	; 144
    132c:	91 e0       	ldi	r25, 0x01	; 1
    132e:	9a 8b       	std	Y+18, r25	; 0x12
    1330:	89 8b       	std	Y+17, r24	; 0x11
    1332:	89 89       	ldd	r24, Y+17	; 0x11
    1334:	9a 89       	ldd	r25, Y+18	; 0x12
    1336:	01 97       	sbiw	r24, 0x01	; 1
    1338:	f1 f7       	brne	.-4      	; 0x1336 <main+0x7f0>
    133a:	9a 8b       	std	Y+18, r25	; 0x12
    133c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    133e:	8b 89       	ldd	r24, Y+19	; 0x13
    1340:	9c 89       	ldd	r25, Y+20	; 0x14
    1342:	01 97       	sbiw	r24, 0x01	; 1
    1344:	9c 8b       	std	Y+20, r25	; 0x14
    1346:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1348:	8b 89       	ldd	r24, Y+19	; 0x13
    134a:	9c 89       	ldd	r25, Y+20	; 0x14
    134c:	00 97       	sbiw	r24, 0x00	; 0
    134e:	69 f7       	brne	.-38     	; 0x132a <main+0x7e4>
    1350:	14 c0       	rjmp	.+40     	; 0x137a <main+0x834>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1352:	6d 89       	ldd	r22, Y+21	; 0x15
    1354:	7e 89       	ldd	r23, Y+22	; 0x16
    1356:	8f 89       	ldd	r24, Y+23	; 0x17
    1358:	98 8d       	ldd	r25, Y+24	; 0x18
    135a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135e:	dc 01       	movw	r26, r24
    1360:	cb 01       	movw	r24, r22
    1362:	9c 8b       	std	Y+20, r25	; 0x14
    1364:	8b 8b       	std	Y+19, r24	; 0x13
    1366:	8b 89       	ldd	r24, Y+19	; 0x13
    1368:	9c 89       	ldd	r25, Y+20	; 0x14
    136a:	98 8b       	std	Y+16, r25	; 0x10
    136c:	8f 87       	std	Y+15, r24	; 0x0f
    136e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1370:	98 89       	ldd	r25, Y+16	; 0x10
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	f1 f7       	brne	.-4      	; 0x1372 <main+0x82c>
    1376:	98 8b       	std	Y+16, r25	; 0x10
    1378:	8f 87       	std	Y+15, r24	; 0x0f
       	_delay_ms(2);

       	PORTA=(1<<PA0);
    137a:	eb e3       	ldi	r30, 0x3B	; 59
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	80 83       	st	Z, r24
       	PORTC = (PORTC & 0xF0) | (hr_digit2 & 0x0F);
    1382:	a5 e3       	ldi	r26, 0x35	; 53
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	e5 e3       	ldi	r30, 0x35	; 53
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	98 2f       	mov	r25, r24
    138e:	90 7f       	andi	r25, 0xF0	; 240
    1390:	80 91 75 00 	lds	r24, 0x0075
    1394:	8f 70       	andi	r24, 0x0F	; 15
    1396:	89 2b       	or	r24, r25
    1398:	8c 93       	st	X, r24
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	a0 e0       	ldi	r26, 0x00	; 0
    13a0:	b0 e4       	ldi	r27, 0x40	; 64
    13a2:	8b 87       	std	Y+11, r24	; 0x0b
    13a4:	9c 87       	std	Y+12, r25	; 0x0c
    13a6:	ad 87       	std	Y+13, r26	; 0x0d
    13a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    13b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	4a e7       	ldi	r20, 0x7A	; 122
    13b8:	55 e4       	ldi	r21, 0x45	; 69
    13ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	8f 83       	std	Y+7, r24	; 0x07
    13c4:	98 87       	std	Y+8, r25	; 0x08
    13c6:	a9 87       	std	Y+9, r26	; 0x09
    13c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13ca:	6f 81       	ldd	r22, Y+7	; 0x07
    13cc:	78 85       	ldd	r23, Y+8	; 0x08
    13ce:	89 85       	ldd	r24, Y+9	; 0x09
    13d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d2:	20 e0       	ldi	r18, 0x00	; 0
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	40 e8       	ldi	r20, 0x80	; 128
    13d8:	5f e3       	ldi	r21, 0x3F	; 63
    13da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13de:	88 23       	and	r24, r24
    13e0:	2c f4       	brge	.+10     	; 0x13ec <main+0x8a6>
		__ticks = 1;
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	9e 83       	std	Y+6, r25	; 0x06
    13e8:	8d 83       	std	Y+5, r24	; 0x05
    13ea:	3f c0       	rjmp	.+126    	; 0x146a <main+0x924>
	else if (__tmp > 65535)
    13ec:	6f 81       	ldd	r22, Y+7	; 0x07
    13ee:	78 85       	ldd	r23, Y+8	; 0x08
    13f0:	89 85       	ldd	r24, Y+9	; 0x09
    13f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f4:	20 e0       	ldi	r18, 0x00	; 0
    13f6:	3f ef       	ldi	r19, 0xFF	; 255
    13f8:	4f e7       	ldi	r20, 0x7F	; 127
    13fa:	57 e4       	ldi	r21, 0x47	; 71
    13fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1400:	18 16       	cp	r1, r24
    1402:	4c f5       	brge	.+82     	; 0x1456 <main+0x910>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1404:	6b 85       	ldd	r22, Y+11	; 0x0b
    1406:	7c 85       	ldd	r23, Y+12	; 0x0c
    1408:	8d 85       	ldd	r24, Y+13	; 0x0d
    140a:	9e 85       	ldd	r25, Y+14	; 0x0e
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e2       	ldi	r20, 0x20	; 32
    1412:	51 e4       	ldi	r21, 0x41	; 65
    1414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1418:	dc 01       	movw	r26, r24
    141a:	cb 01       	movw	r24, r22
    141c:	bc 01       	movw	r22, r24
    141e:	cd 01       	movw	r24, r26
    1420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	9e 83       	std	Y+6, r25	; 0x06
    142a:	8d 83       	std	Y+5, r24	; 0x05
    142c:	0f c0       	rjmp	.+30     	; 0x144c <main+0x906>
    142e:	80 e9       	ldi	r24, 0x90	; 144
    1430:	91 e0       	ldi	r25, 0x01	; 1
    1432:	9c 83       	std	Y+4, r25	; 0x04
    1434:	8b 83       	std	Y+3, r24	; 0x03
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	9c 81       	ldd	r25, Y+4	; 0x04
    143a:	01 97       	sbiw	r24, 0x01	; 1
    143c:	f1 f7       	brne	.-4      	; 0x143a <main+0x8f4>
    143e:	9c 83       	std	Y+4, r25	; 0x04
    1440:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1442:	8d 81       	ldd	r24, Y+5	; 0x05
    1444:	9e 81       	ldd	r25, Y+6	; 0x06
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	9e 83       	std	Y+6, r25	; 0x06
    144a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    144c:	8d 81       	ldd	r24, Y+5	; 0x05
    144e:	9e 81       	ldd	r25, Y+6	; 0x06
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	69 f7       	brne	.-38     	; 0x142e <main+0x8e8>
    1454:	9e cb       	rjmp	.-2244   	; 0xb92 <main+0x4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1456:	6f 81       	ldd	r22, Y+7	; 0x07
    1458:	78 85       	ldd	r23, Y+8	; 0x08
    145a:	89 85       	ldd	r24, Y+9	; 0x09
    145c:	9a 85       	ldd	r25, Y+10	; 0x0a
    145e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	9e 83       	std	Y+6, r25	; 0x06
    1468:	8d 83       	std	Y+5, r24	; 0x05
    146a:	8d 81       	ldd	r24, Y+5	; 0x05
    146c:	9e 81       	ldd	r25, Y+6	; 0x06
    146e:	9a 83       	std	Y+2, r25	; 0x02
    1470:	89 83       	std	Y+1, r24	; 0x01
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	9a 81       	ldd	r25, Y+2	; 0x02
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	f1 f7       	brne	.-4      	; 0x1476 <main+0x930>
    147a:	9a 83       	std	Y+2, r25	; 0x02
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	89 cb       	rjmp	.-2286   	; 0xb92 <main+0x4c>

00001480 <Increment_Mode>:
       	_delay_ms(2);
    }
}

void Increment_Mode(void)
{
    1480:	df 93       	push	r29
    1482:	cf 93       	push	r28
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	aa 97       	sbiw	r28, 0x2a	; 42
    148a:	0f b6       	in	r0, 0x3f	; 63
    148c:	f8 94       	cli
    148e:	de bf       	out	0x3e, r29	; 62
    1490:	0f be       	out	0x3f, r0	; 63
    1492:	cd bf       	out	0x3d, r28	; 61
	if(!(PINB & (1<<PB6))) //seconds Increment
    1494:	e6 e3       	ldi	r30, 0x36	; 54
    1496:	f0 e0       	ldi	r31, 0x00	; 0
    1498:	80 81       	ld	r24, Z
    149a:	88 2f       	mov	r24, r24
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	80 74       	andi	r24, 0x40	; 64
    14a0:	90 70       	andi	r25, 0x00	; 0
    14a2:	00 97       	sbiw	r24, 0x00	; 0
    14a4:	09 f0       	breq	.+2      	; 0x14a8 <Increment_Mode+0x28>
    14a6:	a6 c0       	rjmp	.+332    	; 0x15f4 <Increment_Mode+0x174>
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	a0 e2       	ldi	r26, 0x20	; 32
    14ae:	b1 e4       	ldi	r27, 0x41	; 65
    14b0:	8f a3       	std	Y+39, r24	; 0x27
    14b2:	98 a7       	std	Y+40, r25	; 0x28
    14b4:	a9 a7       	std	Y+41, r26	; 0x29
    14b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b8:	6f a1       	ldd	r22, Y+39	; 0x27
    14ba:	78 a5       	ldd	r23, Y+40	; 0x28
    14bc:	89 a5       	ldd	r24, Y+41	; 0x29
    14be:	9a a5       	ldd	r25, Y+42	; 0x2a
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	4a e7       	ldi	r20, 0x7A	; 122
    14c6:	55 e4       	ldi	r21, 0x45	; 69
    14c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	8b a3       	std	Y+35, r24	; 0x23
    14d2:	9c a3       	std	Y+36, r25	; 0x24
    14d4:	ad a3       	std	Y+37, r26	; 0x25
    14d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    14d8:	6b a1       	ldd	r22, Y+35	; 0x23
    14da:	7c a1       	ldd	r23, Y+36	; 0x24
    14dc:	8d a1       	ldd	r24, Y+37	; 0x25
    14de:	9e a1       	ldd	r25, Y+38	; 0x26
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	40 e8       	ldi	r20, 0x80	; 128
    14e6:	5f e3       	ldi	r21, 0x3F	; 63
    14e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14ec:	88 23       	and	r24, r24
    14ee:	2c f4       	brge	.+10     	; 0x14fa <Increment_Mode+0x7a>
		__ticks = 1;
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	9a a3       	std	Y+34, r25	; 0x22
    14f6:	89 a3       	std	Y+33, r24	; 0x21
    14f8:	3f c0       	rjmp	.+126    	; 0x1578 <Increment_Mode+0xf8>
	else if (__tmp > 65535)
    14fa:	6b a1       	ldd	r22, Y+35	; 0x23
    14fc:	7c a1       	ldd	r23, Y+36	; 0x24
    14fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1500:	9e a1       	ldd	r25, Y+38	; 0x26
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	3f ef       	ldi	r19, 0xFF	; 255
    1506:	4f e7       	ldi	r20, 0x7F	; 127
    1508:	57 e4       	ldi	r21, 0x47	; 71
    150a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    150e:	18 16       	cp	r1, r24
    1510:	4c f5       	brge	.+82     	; 0x1564 <Increment_Mode+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1512:	6f a1       	ldd	r22, Y+39	; 0x27
    1514:	78 a5       	ldd	r23, Y+40	; 0x28
    1516:	89 a5       	ldd	r24, Y+41	; 0x29
    1518:	9a a5       	ldd	r25, Y+42	; 0x2a
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	40 e2       	ldi	r20, 0x20	; 32
    1520:	51 e4       	ldi	r21, 0x41	; 65
    1522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1526:	dc 01       	movw	r26, r24
    1528:	cb 01       	movw	r24, r22
    152a:	bc 01       	movw	r22, r24
    152c:	cd 01       	movw	r24, r26
    152e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	9a a3       	std	Y+34, r25	; 0x22
    1538:	89 a3       	std	Y+33, r24	; 0x21
    153a:	0f c0       	rjmp	.+30     	; 0x155a <Increment_Mode+0xda>
    153c:	80 e9       	ldi	r24, 0x90	; 144
    153e:	91 e0       	ldi	r25, 0x01	; 1
    1540:	98 a3       	std	Y+32, r25	; 0x20
    1542:	8f 8f       	std	Y+31, r24	; 0x1f
    1544:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1546:	98 a1       	ldd	r25, Y+32	; 0x20
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	f1 f7       	brne	.-4      	; 0x1548 <Increment_Mode+0xc8>
    154c:	98 a3       	std	Y+32, r25	; 0x20
    154e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1550:	89 a1       	ldd	r24, Y+33	; 0x21
    1552:	9a a1       	ldd	r25, Y+34	; 0x22
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	9a a3       	std	Y+34, r25	; 0x22
    1558:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    155a:	89 a1       	ldd	r24, Y+33	; 0x21
    155c:	9a a1       	ldd	r25, Y+34	; 0x22
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	69 f7       	brne	.-38     	; 0x153c <Increment_Mode+0xbc>
    1562:	14 c0       	rjmp	.+40     	; 0x158c <Increment_Mode+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1564:	6b a1       	ldd	r22, Y+35	; 0x23
    1566:	7c a1       	ldd	r23, Y+36	; 0x24
    1568:	8d a1       	ldd	r24, Y+37	; 0x25
    156a:	9e a1       	ldd	r25, Y+38	; 0x26
    156c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	9a a3       	std	Y+34, r25	; 0x22
    1576:	89 a3       	std	Y+33, r24	; 0x21
    1578:	89 a1       	ldd	r24, Y+33	; 0x21
    157a:	9a a1       	ldd	r25, Y+34	; 0x22
    157c:	9e 8f       	std	Y+30, r25	; 0x1e
    157e:	8d 8f       	std	Y+29, r24	; 0x1d
    1580:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1582:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1584:	01 97       	sbiw	r24, 0x01	; 1
    1586:	f1 f7       	brne	.-4      	; 0x1584 <Increment_Mode+0x104>
    1588:	9e 8f       	std	Y+30, r25	; 0x1e
    158a:	8d 8f       	std	Y+29, r24	; 0x1d
		{
			_delay_ms(10);
			if(!(PINB & (1<<PB6)))
    158c:	e6 e3       	ldi	r30, 0x36	; 54
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	88 2f       	mov	r24, r24
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	80 74       	andi	r24, 0x40	; 64
    1598:	90 70       	andi	r25, 0x00	; 0
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	09 f0       	breq	.+2      	; 0x15a0 <Increment_Mode+0x120>
    159e:	69 c1       	rjmp	.+722    	; 0x1872 <Increment_Mode+0x3f2>
			{
			    if(flag1 == 0)
    15a0:	80 91 6a 00 	lds	r24, 0x006A
    15a4:	88 23       	and	r24, r24
    15a6:	09 f0       	breq	.+2      	; 0x15aa <Increment_Mode+0x12a>
    15a8:	64 c1       	rjmp	.+712    	; 0x1872 <Increment_Mode+0x3f2>
			    {
			        sec++;
    15aa:	80 91 6d 00 	lds	r24, 0x006D
    15ae:	8f 5f       	subi	r24, 0xFF	; 255
    15b0:	80 93 6d 00 	sts	0x006D, r24
			        if(sec==60)
    15b4:	80 91 6d 00 	lds	r24, 0x006D
    15b8:	8c 33       	cpi	r24, 0x3C	; 60
    15ba:	39 f4       	brne	.+14     	; 0x15ca <Increment_Mode+0x14a>
			        {
				    	sec=0;
    15bc:	10 92 6d 00 	sts	0x006D, r1
			        	min++;
    15c0:	80 91 70 00 	lds	r24, 0x0070
    15c4:	8f 5f       	subi	r24, 0xFF	; 255
    15c6:	80 93 70 00 	sts	0x0070, r24
			        }
			        if(min==60)
    15ca:	80 91 70 00 	lds	r24, 0x0070
    15ce:	8c 33       	cpi	r24, 0x3C	; 60
    15d0:	39 f4       	brne	.+14     	; 0x15e0 <Increment_Mode+0x160>
			        {
			        	min=0;
    15d2:	10 92 70 00 	sts	0x0070, r1
			        	hr++;
    15d6:	80 91 73 00 	lds	r24, 0x0073
    15da:	8f 5f       	subi	r24, 0xFF	; 255
    15dc:	80 93 73 00 	sts	0x0073, r24
			        }
			        if(hr==24)
    15e0:	80 91 73 00 	lds	r24, 0x0073
    15e4:	88 31       	cpi	r24, 0x18	; 24
    15e6:	11 f4       	brne	.+4      	; 0x15ec <Increment_Mode+0x16c>
				    {
			    	    hr=0;
    15e8:	10 92 73 00 	sts	0x0073, r1
				    }
			        flag1=1;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	80 93 6a 00 	sts	0x006A, r24
    15f2:	3f c1       	rjmp	.+638    	; 0x1872 <Increment_Mode+0x3f2>
			    }
		    }
		}
		else if(!(PINB & (1<<PB4))) //Minutes Increment
    15f4:	e6 e3       	ldi	r30, 0x36	; 54
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	88 2f       	mov	r24, r24
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	80 71       	andi	r24, 0x10	; 16
    1600:	90 70       	andi	r25, 0x00	; 0
    1602:	00 97       	sbiw	r24, 0x00	; 0
    1604:	09 f0       	breq	.+2      	; 0x1608 <Increment_Mode+0x188>
    1606:	9b c0       	rjmp	.+310    	; 0x173e <Increment_Mode+0x2be>
    1608:	80 e0       	ldi	r24, 0x00	; 0
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	a0 e2       	ldi	r26, 0x20	; 32
    160e:	b1 e4       	ldi	r27, 0x41	; 65
    1610:	89 8f       	std	Y+25, r24	; 0x19
    1612:	9a 8f       	std	Y+26, r25	; 0x1a
    1614:	ab 8f       	std	Y+27, r26	; 0x1b
    1616:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1618:	69 8d       	ldd	r22, Y+25	; 0x19
    161a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    161c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    161e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	4a e7       	ldi	r20, 0x7A	; 122
    1626:	55 e4       	ldi	r21, 0x45	; 69
    1628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	8d 8b       	std	Y+21, r24	; 0x15
    1632:	9e 8b       	std	Y+22, r25	; 0x16
    1634:	af 8b       	std	Y+23, r26	; 0x17
    1636:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1638:	6d 89       	ldd	r22, Y+21	; 0x15
    163a:	7e 89       	ldd	r23, Y+22	; 0x16
    163c:	8f 89       	ldd	r24, Y+23	; 0x17
    163e:	98 8d       	ldd	r25, Y+24	; 0x18
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	40 e8       	ldi	r20, 0x80	; 128
    1646:	5f e3       	ldi	r21, 0x3F	; 63
    1648:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    164c:	88 23       	and	r24, r24
    164e:	2c f4       	brge	.+10     	; 0x165a <Increment_Mode+0x1da>
		__ticks = 1;
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	9c 8b       	std	Y+20, r25	; 0x14
    1656:	8b 8b       	std	Y+19, r24	; 0x13
    1658:	3f c0       	rjmp	.+126    	; 0x16d8 <Increment_Mode+0x258>
	else if (__tmp > 65535)
    165a:	6d 89       	ldd	r22, Y+21	; 0x15
    165c:	7e 89       	ldd	r23, Y+22	; 0x16
    165e:	8f 89       	ldd	r24, Y+23	; 0x17
    1660:	98 8d       	ldd	r25, Y+24	; 0x18
    1662:	20 e0       	ldi	r18, 0x00	; 0
    1664:	3f ef       	ldi	r19, 0xFF	; 255
    1666:	4f e7       	ldi	r20, 0x7F	; 127
    1668:	57 e4       	ldi	r21, 0x47	; 71
    166a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    166e:	18 16       	cp	r1, r24
    1670:	4c f5       	brge	.+82     	; 0x16c4 <Increment_Mode+0x244>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1672:	69 8d       	ldd	r22, Y+25	; 0x19
    1674:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1676:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1678:	9c 8d       	ldd	r25, Y+28	; 0x1c
    167a:	20 e0       	ldi	r18, 0x00	; 0
    167c:	30 e0       	ldi	r19, 0x00	; 0
    167e:	40 e2       	ldi	r20, 0x20	; 32
    1680:	51 e4       	ldi	r21, 0x41	; 65
    1682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1686:	dc 01       	movw	r26, r24
    1688:	cb 01       	movw	r24, r22
    168a:	bc 01       	movw	r22, r24
    168c:	cd 01       	movw	r24, r26
    168e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1692:	dc 01       	movw	r26, r24
    1694:	cb 01       	movw	r24, r22
    1696:	9c 8b       	std	Y+20, r25	; 0x14
    1698:	8b 8b       	std	Y+19, r24	; 0x13
    169a:	0f c0       	rjmp	.+30     	; 0x16ba <Increment_Mode+0x23a>
    169c:	80 e9       	ldi	r24, 0x90	; 144
    169e:	91 e0       	ldi	r25, 0x01	; 1
    16a0:	9a 8b       	std	Y+18, r25	; 0x12
    16a2:	89 8b       	std	Y+17, r24	; 0x11
    16a4:	89 89       	ldd	r24, Y+17	; 0x11
    16a6:	9a 89       	ldd	r25, Y+18	; 0x12
    16a8:	01 97       	sbiw	r24, 0x01	; 1
    16aa:	f1 f7       	brne	.-4      	; 0x16a8 <Increment_Mode+0x228>
    16ac:	9a 8b       	std	Y+18, r25	; 0x12
    16ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16b0:	8b 89       	ldd	r24, Y+19	; 0x13
    16b2:	9c 89       	ldd	r25, Y+20	; 0x14
    16b4:	01 97       	sbiw	r24, 0x01	; 1
    16b6:	9c 8b       	std	Y+20, r25	; 0x14
    16b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ba:	8b 89       	ldd	r24, Y+19	; 0x13
    16bc:	9c 89       	ldd	r25, Y+20	; 0x14
    16be:	00 97       	sbiw	r24, 0x00	; 0
    16c0:	69 f7       	brne	.-38     	; 0x169c <Increment_Mode+0x21c>
    16c2:	14 c0       	rjmp	.+40     	; 0x16ec <Increment_Mode+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c4:	6d 89       	ldd	r22, Y+21	; 0x15
    16c6:	7e 89       	ldd	r23, Y+22	; 0x16
    16c8:	8f 89       	ldd	r24, Y+23	; 0x17
    16ca:	98 8d       	ldd	r25, Y+24	; 0x18
    16cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	9c 8b       	std	Y+20, r25	; 0x14
    16d6:	8b 8b       	std	Y+19, r24	; 0x13
    16d8:	8b 89       	ldd	r24, Y+19	; 0x13
    16da:	9c 89       	ldd	r25, Y+20	; 0x14
    16dc:	98 8b       	std	Y+16, r25	; 0x10
    16de:	8f 87       	std	Y+15, r24	; 0x0f
    16e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    16e2:	98 89       	ldd	r25, Y+16	; 0x10
    16e4:	01 97       	sbiw	r24, 0x01	; 1
    16e6:	f1 f7       	brne	.-4      	; 0x16e4 <Increment_Mode+0x264>
    16e8:	98 8b       	std	Y+16, r25	; 0x10
    16ea:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(10);
			if(!(PINB & (1<<PB4)))
    16ec:	e6 e3       	ldi	r30, 0x36	; 54
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	88 2f       	mov	r24, r24
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	80 71       	andi	r24, 0x10	; 16
    16f8:	90 70       	andi	r25, 0x00	; 0
    16fa:	00 97       	sbiw	r24, 0x00	; 0
    16fc:	09 f0       	breq	.+2      	; 0x1700 <Increment_Mode+0x280>
    16fe:	b9 c0       	rjmp	.+370    	; 0x1872 <Increment_Mode+0x3f2>
			{
			    if(flag1 == 0)
    1700:	80 91 6a 00 	lds	r24, 0x006A
    1704:	88 23       	and	r24, r24
    1706:	09 f0       	breq	.+2      	; 0x170a <Increment_Mode+0x28a>
    1708:	b4 c0       	rjmp	.+360    	; 0x1872 <Increment_Mode+0x3f2>
			    {
			        min++;
    170a:	80 91 70 00 	lds	r24, 0x0070
    170e:	8f 5f       	subi	r24, 0xFF	; 255
    1710:	80 93 70 00 	sts	0x0070, r24
			        if(min==60)
    1714:	80 91 70 00 	lds	r24, 0x0070
    1718:	8c 33       	cpi	r24, 0x3C	; 60
    171a:	39 f4       	brne	.+14     	; 0x172a <Increment_Mode+0x2aa>
			        {
			        	min=0;
    171c:	10 92 70 00 	sts	0x0070, r1
			        	hr++;
    1720:	80 91 73 00 	lds	r24, 0x0073
    1724:	8f 5f       	subi	r24, 0xFF	; 255
    1726:	80 93 73 00 	sts	0x0073, r24
			        }
			        if(hr==24)
    172a:	80 91 73 00 	lds	r24, 0x0073
    172e:	88 31       	cpi	r24, 0x18	; 24
    1730:	11 f4       	brne	.+4      	; 0x1736 <Increment_Mode+0x2b6>
			        {
			        	hr=0;
    1732:	10 92 73 00 	sts	0x0073, r1
			        }
			        flag1=1;
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	80 93 6a 00 	sts	0x006A, r24
    173c:	9a c0       	rjmp	.+308    	; 0x1872 <Increment_Mode+0x3f2>
			    }
		    }
		}
		else if(!(PINB & (1<<PB1))) //hours Increment
    173e:	e6 e3       	ldi	r30, 0x36	; 54
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	88 2f       	mov	r24, r24
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	82 70       	andi	r24, 0x02	; 2
    174a:	90 70       	andi	r25, 0x00	; 0
    174c:	00 97       	sbiw	r24, 0x00	; 0
    174e:	09 f0       	breq	.+2      	; 0x1752 <Increment_Mode+0x2d2>
    1750:	8e c0       	rjmp	.+284    	; 0x186e <Increment_Mode+0x3ee>
    1752:	80 e0       	ldi	r24, 0x00	; 0
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	a0 e2       	ldi	r26, 0x20	; 32
    1758:	b1 e4       	ldi	r27, 0x41	; 65
    175a:	8b 87       	std	Y+11, r24	; 0x0b
    175c:	9c 87       	std	Y+12, r25	; 0x0c
    175e:	ad 87       	std	Y+13, r26	; 0x0d
    1760:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1762:	6b 85       	ldd	r22, Y+11	; 0x0b
    1764:	7c 85       	ldd	r23, Y+12	; 0x0c
    1766:	8d 85       	ldd	r24, Y+13	; 0x0d
    1768:	9e 85       	ldd	r25, Y+14	; 0x0e
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	4a e7       	ldi	r20, 0x7A	; 122
    1770:	55 e4       	ldi	r21, 0x45	; 69
    1772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	8f 83       	std	Y+7, r24	; 0x07
    177c:	98 87       	std	Y+8, r25	; 0x08
    177e:	a9 87       	std	Y+9, r26	; 0x09
    1780:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1782:	6f 81       	ldd	r22, Y+7	; 0x07
    1784:	78 85       	ldd	r23, Y+8	; 0x08
    1786:	89 85       	ldd	r24, Y+9	; 0x09
    1788:	9a 85       	ldd	r25, Y+10	; 0x0a
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	40 e8       	ldi	r20, 0x80	; 128
    1790:	5f e3       	ldi	r21, 0x3F	; 63
    1792:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1796:	88 23       	and	r24, r24
    1798:	2c f4       	brge	.+10     	; 0x17a4 <Increment_Mode+0x324>
		__ticks = 1;
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	9e 83       	std	Y+6, r25	; 0x06
    17a0:	8d 83       	std	Y+5, r24	; 0x05
    17a2:	3f c0       	rjmp	.+126    	; 0x1822 <Increment_Mode+0x3a2>
	else if (__tmp > 65535)
    17a4:	6f 81       	ldd	r22, Y+7	; 0x07
    17a6:	78 85       	ldd	r23, Y+8	; 0x08
    17a8:	89 85       	ldd	r24, Y+9	; 0x09
    17aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	3f ef       	ldi	r19, 0xFF	; 255
    17b0:	4f e7       	ldi	r20, 0x7F	; 127
    17b2:	57 e4       	ldi	r21, 0x47	; 71
    17b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17b8:	18 16       	cp	r1, r24
    17ba:	4c f5       	brge	.+82     	; 0x180e <Increment_Mode+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    17be:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	40 e2       	ldi	r20, 0x20	; 32
    17ca:	51 e4       	ldi	r21, 0x41	; 65
    17cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	bc 01       	movw	r22, r24
    17d6:	cd 01       	movw	r24, r26
    17d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	9e 83       	std	Y+6, r25	; 0x06
    17e2:	8d 83       	std	Y+5, r24	; 0x05
    17e4:	0f c0       	rjmp	.+30     	; 0x1804 <Increment_Mode+0x384>
    17e6:	80 e9       	ldi	r24, 0x90	; 144
    17e8:	91 e0       	ldi	r25, 0x01	; 1
    17ea:	9c 83       	std	Y+4, r25	; 0x04
    17ec:	8b 83       	std	Y+3, r24	; 0x03
    17ee:	8b 81       	ldd	r24, Y+3	; 0x03
    17f0:	9c 81       	ldd	r25, Y+4	; 0x04
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	f1 f7       	brne	.-4      	; 0x17f2 <Increment_Mode+0x372>
    17f6:	9c 83       	std	Y+4, r25	; 0x04
    17f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17fa:	8d 81       	ldd	r24, Y+5	; 0x05
    17fc:	9e 81       	ldd	r25, Y+6	; 0x06
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	9e 83       	std	Y+6, r25	; 0x06
    1802:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1804:	8d 81       	ldd	r24, Y+5	; 0x05
    1806:	9e 81       	ldd	r25, Y+6	; 0x06
    1808:	00 97       	sbiw	r24, 0x00	; 0
    180a:	69 f7       	brne	.-38     	; 0x17e6 <Increment_Mode+0x366>
    180c:	14 c0       	rjmp	.+40     	; 0x1836 <Increment_Mode+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    180e:	6f 81       	ldd	r22, Y+7	; 0x07
    1810:	78 85       	ldd	r23, Y+8	; 0x08
    1812:	89 85       	ldd	r24, Y+9	; 0x09
    1814:	9a 85       	ldd	r25, Y+10	; 0x0a
    1816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181a:	dc 01       	movw	r26, r24
    181c:	cb 01       	movw	r24, r22
    181e:	9e 83       	std	Y+6, r25	; 0x06
    1820:	8d 83       	std	Y+5, r24	; 0x05
    1822:	8d 81       	ldd	r24, Y+5	; 0x05
    1824:	9e 81       	ldd	r25, Y+6	; 0x06
    1826:	9a 83       	std	Y+2, r25	; 0x02
    1828:	89 83       	std	Y+1, r24	; 0x01
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	9a 81       	ldd	r25, Y+2	; 0x02
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	f1 f7       	brne	.-4      	; 0x182e <Increment_Mode+0x3ae>
    1832:	9a 83       	std	Y+2, r25	; 0x02
    1834:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(10);
			if(!(PINB & (1<<PB1)))
    1836:	e6 e3       	ldi	r30, 0x36	; 54
    1838:	f0 e0       	ldi	r31, 0x00	; 0
    183a:	80 81       	ld	r24, Z
    183c:	88 2f       	mov	r24, r24
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	82 70       	andi	r24, 0x02	; 2
    1842:	90 70       	andi	r25, 0x00	; 0
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	a9 f4       	brne	.+42     	; 0x1872 <Increment_Mode+0x3f2>
			{
			    if(flag1 == 0)
    1848:	80 91 6a 00 	lds	r24, 0x006A
    184c:	88 23       	and	r24, r24
    184e:	89 f4       	brne	.+34     	; 0x1872 <Increment_Mode+0x3f2>
			    {
			        hr++;
    1850:	80 91 73 00 	lds	r24, 0x0073
    1854:	8f 5f       	subi	r24, 0xFF	; 255
    1856:	80 93 73 00 	sts	0x0073, r24
			        if(hr==24)
    185a:	80 91 73 00 	lds	r24, 0x0073
    185e:	88 31       	cpi	r24, 0x18	; 24
    1860:	11 f4       	brne	.+4      	; 0x1866 <Increment_Mode+0x3e6>
			        {
			        	hr=0;
    1862:	10 92 73 00 	sts	0x0073, r1
			        }
			        flag1=1;
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	80 93 6a 00 	sts	0x006A, r24
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <Increment_Mode+0x3f2>
		    }
		}
		else
		{
			// button is released reset the button flag to value 0 again.
			flag1 = 0;
    186e:	10 92 6a 00 	sts	0x006A, r1
		}
}
    1872:	aa 96       	adiw	r28, 0x2a	; 42
    1874:	0f b6       	in	r0, 0x3f	; 63
    1876:	f8 94       	cli
    1878:	de bf       	out	0x3e, r29	; 62
    187a:	0f be       	out	0x3f, r0	; 63
    187c:	cd bf       	out	0x3d, r28	; 61
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <Decrement_Mode>:
void Decrement_Mode(void)
{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	aa 97       	sbiw	r28, 0x2a	; 42
    188e:	0f b6       	in	r0, 0x3f	; 63
    1890:	f8 94       	cli
    1892:	de bf       	out	0x3e, r29	; 62
    1894:	0f be       	out	0x3f, r0	; 63
    1896:	cd bf       	out	0x3d, r28	; 61
	if(!(PINB & (1<<PB5))) //seconds Decrement
    1898:	e6 e3       	ldi	r30, 0x36	; 54
    189a:	f0 e0       	ldi	r31, 0x00	; 0
    189c:	80 81       	ld	r24, Z
    189e:	88 2f       	mov	r24, r24
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	80 72       	andi	r24, 0x20	; 32
    18a4:	90 70       	andi	r25, 0x00	; 0
    18a6:	00 97       	sbiw	r24, 0x00	; 0
    18a8:	09 f0       	breq	.+2      	; 0x18ac <Decrement_Mode+0x28>
    18aa:	b7 c0       	rjmp	.+366    	; 0x1a1a <Decrement_Mode+0x196>
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	a0 e2       	ldi	r26, 0x20	; 32
    18b2:	b1 e4       	ldi	r27, 0x41	; 65
    18b4:	8f a3       	std	Y+39, r24	; 0x27
    18b6:	98 a7       	std	Y+40, r25	; 0x28
    18b8:	a9 a7       	std	Y+41, r26	; 0x29
    18ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18bc:	6f a1       	ldd	r22, Y+39	; 0x27
    18be:	78 a5       	ldd	r23, Y+40	; 0x28
    18c0:	89 a5       	ldd	r24, Y+41	; 0x29
    18c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	4a e7       	ldi	r20, 0x7A	; 122
    18ca:	55 e4       	ldi	r21, 0x45	; 69
    18cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	8b a3       	std	Y+35, r24	; 0x23
    18d6:	9c a3       	std	Y+36, r25	; 0x24
    18d8:	ad a3       	std	Y+37, r26	; 0x25
    18da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18dc:	6b a1       	ldd	r22, Y+35	; 0x23
    18de:	7c a1       	ldd	r23, Y+36	; 0x24
    18e0:	8d a1       	ldd	r24, Y+37	; 0x25
    18e2:	9e a1       	ldd	r25, Y+38	; 0x26
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	30 e0       	ldi	r19, 0x00	; 0
    18e8:	40 e8       	ldi	r20, 0x80	; 128
    18ea:	5f e3       	ldi	r21, 0x3F	; 63
    18ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18f0:	88 23       	and	r24, r24
    18f2:	2c f4       	brge	.+10     	; 0x18fe <Decrement_Mode+0x7a>
		__ticks = 1;
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	9a a3       	std	Y+34, r25	; 0x22
    18fa:	89 a3       	std	Y+33, r24	; 0x21
    18fc:	3f c0       	rjmp	.+126    	; 0x197c <Decrement_Mode+0xf8>
	else if (__tmp > 65535)
    18fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1900:	7c a1       	ldd	r23, Y+36	; 0x24
    1902:	8d a1       	ldd	r24, Y+37	; 0x25
    1904:	9e a1       	ldd	r25, Y+38	; 0x26
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	3f ef       	ldi	r19, 0xFF	; 255
    190a:	4f e7       	ldi	r20, 0x7F	; 127
    190c:	57 e4       	ldi	r21, 0x47	; 71
    190e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1912:	18 16       	cp	r1, r24
    1914:	4c f5       	brge	.+82     	; 0x1968 <Decrement_Mode+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1916:	6f a1       	ldd	r22, Y+39	; 0x27
    1918:	78 a5       	ldd	r23, Y+40	; 0x28
    191a:	89 a5       	ldd	r24, Y+41	; 0x29
    191c:	9a a5       	ldd	r25, Y+42	; 0x2a
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	40 e2       	ldi	r20, 0x20	; 32
    1924:	51 e4       	ldi	r21, 0x41	; 65
    1926:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    192a:	dc 01       	movw	r26, r24
    192c:	cb 01       	movw	r24, r22
    192e:	bc 01       	movw	r22, r24
    1930:	cd 01       	movw	r24, r26
    1932:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	9a a3       	std	Y+34, r25	; 0x22
    193c:	89 a3       	std	Y+33, r24	; 0x21
    193e:	0f c0       	rjmp	.+30     	; 0x195e <Decrement_Mode+0xda>
    1940:	80 e9       	ldi	r24, 0x90	; 144
    1942:	91 e0       	ldi	r25, 0x01	; 1
    1944:	98 a3       	std	Y+32, r25	; 0x20
    1946:	8f 8f       	std	Y+31, r24	; 0x1f
    1948:	8f 8d       	ldd	r24, Y+31	; 0x1f
    194a:	98 a1       	ldd	r25, Y+32	; 0x20
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	f1 f7       	brne	.-4      	; 0x194c <Decrement_Mode+0xc8>
    1950:	98 a3       	std	Y+32, r25	; 0x20
    1952:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1954:	89 a1       	ldd	r24, Y+33	; 0x21
    1956:	9a a1       	ldd	r25, Y+34	; 0x22
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	9a a3       	std	Y+34, r25	; 0x22
    195c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    195e:	89 a1       	ldd	r24, Y+33	; 0x21
    1960:	9a a1       	ldd	r25, Y+34	; 0x22
    1962:	00 97       	sbiw	r24, 0x00	; 0
    1964:	69 f7       	brne	.-38     	; 0x1940 <Decrement_Mode+0xbc>
    1966:	14 c0       	rjmp	.+40     	; 0x1990 <Decrement_Mode+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1968:	6b a1       	ldd	r22, Y+35	; 0x23
    196a:	7c a1       	ldd	r23, Y+36	; 0x24
    196c:	8d a1       	ldd	r24, Y+37	; 0x25
    196e:	9e a1       	ldd	r25, Y+38	; 0x26
    1970:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1974:	dc 01       	movw	r26, r24
    1976:	cb 01       	movw	r24, r22
    1978:	9a a3       	std	Y+34, r25	; 0x22
    197a:	89 a3       	std	Y+33, r24	; 0x21
    197c:	89 a1       	ldd	r24, Y+33	; 0x21
    197e:	9a a1       	ldd	r25, Y+34	; 0x22
    1980:	9e 8f       	std	Y+30, r25	; 0x1e
    1982:	8d 8f       	std	Y+29, r24	; 0x1d
    1984:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1986:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1988:	01 97       	sbiw	r24, 0x01	; 1
    198a:	f1 f7       	brne	.-4      	; 0x1988 <Decrement_Mode+0x104>
    198c:	9e 8f       	std	Y+30, r25	; 0x1e
    198e:	8d 8f       	std	Y+29, r24	; 0x1d
	{
		_delay_ms(10);
		if(!(PINB & (1<<PB5)))
    1990:	e6 e3       	ldi	r30, 0x36	; 54
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	88 2f       	mov	r24, r24
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	80 72       	andi	r24, 0x20	; 32
    199c:	90 70       	andi	r25, 0x00	; 0
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	09 f0       	breq	.+2      	; 0x19a4 <Decrement_Mode+0x120>
    19a2:	8e c1       	rjmp	.+796    	; 0x1cc0 <Decrement_Mode+0x43c>
		{
			if(flag2 == 0)
    19a4:	80 91 6b 00 	lds	r24, 0x006B
    19a8:	88 23       	and	r24, r24
    19aa:	09 f0       	breq	.+2      	; 0x19ae <Decrement_Mode+0x12a>
    19ac:	89 c1       	rjmp	.+786    	; 0x1cc0 <Decrement_Mode+0x43c>
			{
				if(sec!=0)
    19ae:	80 91 6d 00 	lds	r24, 0x006D
    19b2:	88 23       	and	r24, r24
    19b4:	31 f0       	breq	.+12     	; 0x19c2 <Decrement_Mode+0x13e>
				{
					sec--;
    19b6:	80 91 6d 00 	lds	r24, 0x006D
    19ba:	81 50       	subi	r24, 0x01	; 1
    19bc:	80 93 6d 00 	sts	0x006D, r24
    19c0:	28 c0       	rjmp	.+80     	; 0x1a12 <Decrement_Mode+0x18e>
				}
				else if(sec==0 && min!=0)
    19c2:	80 91 6d 00 	lds	r24, 0x006D
    19c6:	88 23       	and	r24, r24
    19c8:	69 f4       	brne	.+26     	; 0x19e4 <Decrement_Mode+0x160>
    19ca:	80 91 70 00 	lds	r24, 0x0070
    19ce:	88 23       	and	r24, r24
    19d0:	49 f0       	breq	.+18     	; 0x19e4 <Decrement_Mode+0x160>
			    {
			    	min--;
    19d2:	80 91 70 00 	lds	r24, 0x0070
    19d6:	81 50       	subi	r24, 0x01	; 1
    19d8:	80 93 70 00 	sts	0x0070, r24
	 		    	sec=59;
    19dc:	8b e3       	ldi	r24, 0x3B	; 59
    19de:	80 93 6d 00 	sts	0x006D, r24
    19e2:	17 c0       	rjmp	.+46     	; 0x1a12 <Decrement_Mode+0x18e>
			    }
				else if(sec==0 && min==0 &&hr!=0)
    19e4:	80 91 6d 00 	lds	r24, 0x006D
    19e8:	88 23       	and	r24, r24
    19ea:	99 f4       	brne	.+38     	; 0x1a12 <Decrement_Mode+0x18e>
    19ec:	80 91 70 00 	lds	r24, 0x0070
    19f0:	88 23       	and	r24, r24
    19f2:	79 f4       	brne	.+30     	; 0x1a12 <Decrement_Mode+0x18e>
    19f4:	80 91 73 00 	lds	r24, 0x0073
    19f8:	88 23       	and	r24, r24
    19fa:	59 f0       	breq	.+22     	; 0x1a12 <Decrement_Mode+0x18e>
			    {
					sec=59;
    19fc:	8b e3       	ldi	r24, 0x3B	; 59
    19fe:	80 93 6d 00 	sts	0x006D, r24
			    	min=59;
    1a02:	8b e3       	ldi	r24, 0x3B	; 59
    1a04:	80 93 70 00 	sts	0x0070, r24
			    	hr--;
    1a08:	80 91 73 00 	lds	r24, 0x0073
    1a0c:	81 50       	subi	r24, 0x01	; 1
    1a0e:	80 93 73 00 	sts	0x0073, r24
			    }
			    flag2=1;
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	80 93 6b 00 	sts	0x006B, r24
    1a18:	53 c1       	rjmp	.+678    	; 0x1cc0 <Decrement_Mode+0x43c>
			}
		}
	}
	else if(!(PINB & (1<<PB3))) //Minutes Decrement
    1a1a:	e6 e3       	ldi	r30, 0x36	; 54
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	88 2f       	mov	r24, r24
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	88 70       	andi	r24, 0x08	; 8
    1a26:	90 70       	andi	r25, 0x00	; 0
    1a28:	00 97       	sbiw	r24, 0x00	; 0
    1a2a:	09 f0       	breq	.+2      	; 0x1a2e <Decrement_Mode+0x1aa>
    1a2c:	aa c0       	rjmp	.+340    	; 0x1b82 <Decrement_Mode+0x2fe>
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	a0 e2       	ldi	r26, 0x20	; 32
    1a34:	b1 e4       	ldi	r27, 0x41	; 65
    1a36:	89 8f       	std	Y+25, r24	; 0x19
    1a38:	9a 8f       	std	Y+26, r25	; 0x1a
    1a3a:	ab 8f       	std	Y+27, r26	; 0x1b
    1a3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	4a e7       	ldi	r20, 0x7A	; 122
    1a4c:	55 e4       	ldi	r21, 0x45	; 69
    1a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a52:	dc 01       	movw	r26, r24
    1a54:	cb 01       	movw	r24, r22
    1a56:	8d 8b       	std	Y+21, r24	; 0x15
    1a58:	9e 8b       	std	Y+22, r25	; 0x16
    1a5a:	af 8b       	std	Y+23, r26	; 0x17
    1a5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a5e:	6d 89       	ldd	r22, Y+21	; 0x15
    1a60:	7e 89       	ldd	r23, Y+22	; 0x16
    1a62:	8f 89       	ldd	r24, Y+23	; 0x17
    1a64:	98 8d       	ldd	r25, Y+24	; 0x18
    1a66:	20 e0       	ldi	r18, 0x00	; 0
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	40 e8       	ldi	r20, 0x80	; 128
    1a6c:	5f e3       	ldi	r21, 0x3F	; 63
    1a6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a72:	88 23       	and	r24, r24
    1a74:	2c f4       	brge	.+10     	; 0x1a80 <Decrement_Mode+0x1fc>
		__ticks = 1;
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	9c 8b       	std	Y+20, r25	; 0x14
    1a7c:	8b 8b       	std	Y+19, r24	; 0x13
    1a7e:	3f c0       	rjmp	.+126    	; 0x1afe <Decrement_Mode+0x27a>
	else if (__tmp > 65535)
    1a80:	6d 89       	ldd	r22, Y+21	; 0x15
    1a82:	7e 89       	ldd	r23, Y+22	; 0x16
    1a84:	8f 89       	ldd	r24, Y+23	; 0x17
    1a86:	98 8d       	ldd	r25, Y+24	; 0x18
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	3f ef       	ldi	r19, 0xFF	; 255
    1a8c:	4f e7       	ldi	r20, 0x7F	; 127
    1a8e:	57 e4       	ldi	r21, 0x47	; 71
    1a90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a94:	18 16       	cp	r1, r24
    1a96:	4c f5       	brge	.+82     	; 0x1aea <Decrement_Mode+0x266>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a98:	69 8d       	ldd	r22, Y+25	; 0x19
    1a9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aa0:	20 e0       	ldi	r18, 0x00	; 0
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	40 e2       	ldi	r20, 0x20	; 32
    1aa6:	51 e4       	ldi	r21, 0x41	; 65
    1aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	bc 01       	movw	r22, r24
    1ab2:	cd 01       	movw	r24, r26
    1ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	9c 8b       	std	Y+20, r25	; 0x14
    1abe:	8b 8b       	std	Y+19, r24	; 0x13
    1ac0:	0f c0       	rjmp	.+30     	; 0x1ae0 <Decrement_Mode+0x25c>
    1ac2:	80 e9       	ldi	r24, 0x90	; 144
    1ac4:	91 e0       	ldi	r25, 0x01	; 1
    1ac6:	9a 8b       	std	Y+18, r25	; 0x12
    1ac8:	89 8b       	std	Y+17, r24	; 0x11
    1aca:	89 89       	ldd	r24, Y+17	; 0x11
    1acc:	9a 89       	ldd	r25, Y+18	; 0x12
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	f1 f7       	brne	.-4      	; 0x1ace <Decrement_Mode+0x24a>
    1ad2:	9a 8b       	std	Y+18, r25	; 0x12
    1ad4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ad8:	9c 89       	ldd	r25, Y+20	; 0x14
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	9c 8b       	std	Y+20, r25	; 0x14
    1ade:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae4:	00 97       	sbiw	r24, 0x00	; 0
    1ae6:	69 f7       	brne	.-38     	; 0x1ac2 <Decrement_Mode+0x23e>
    1ae8:	14 c0       	rjmp	.+40     	; 0x1b12 <Decrement_Mode+0x28e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aea:	6d 89       	ldd	r22, Y+21	; 0x15
    1aec:	7e 89       	ldd	r23, Y+22	; 0x16
    1aee:	8f 89       	ldd	r24, Y+23	; 0x17
    1af0:	98 8d       	ldd	r25, Y+24	; 0x18
    1af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	9c 8b       	std	Y+20, r25	; 0x14
    1afc:	8b 8b       	std	Y+19, r24	; 0x13
    1afe:	8b 89       	ldd	r24, Y+19	; 0x13
    1b00:	9c 89       	ldd	r25, Y+20	; 0x14
    1b02:	98 8b       	std	Y+16, r25	; 0x10
    1b04:	8f 87       	std	Y+15, r24	; 0x0f
    1b06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b08:	98 89       	ldd	r25, Y+16	; 0x10
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	f1 f7       	brne	.-4      	; 0x1b0a <Decrement_Mode+0x286>
    1b0e:	98 8b       	std	Y+16, r25	; 0x10
    1b10:	8f 87       	std	Y+15, r24	; 0x0f
	{
		_delay_ms(10);
		if(!(PINB & (1<<PB3)))
    1b12:	e6 e3       	ldi	r30, 0x36	; 54
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	88 2f       	mov	r24, r24
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	88 70       	andi	r24, 0x08	; 8
    1b1e:	90 70       	andi	r25, 0x00	; 0
    1b20:	00 97       	sbiw	r24, 0x00	; 0
    1b22:	09 f0       	breq	.+2      	; 0x1b26 <Decrement_Mode+0x2a2>
    1b24:	cd c0       	rjmp	.+410    	; 0x1cc0 <Decrement_Mode+0x43c>
		{
			if(flag2 == 0)
    1b26:	80 91 6b 00 	lds	r24, 0x006B
    1b2a:	88 23       	and	r24, r24
    1b2c:	09 f0       	breq	.+2      	; 0x1b30 <Decrement_Mode+0x2ac>
    1b2e:	c8 c0       	rjmp	.+400    	; 0x1cc0 <Decrement_Mode+0x43c>
			{
				if(min>0)
    1b30:	80 91 70 00 	lds	r24, 0x0070
    1b34:	88 23       	and	r24, r24
    1b36:	31 f0       	breq	.+12     	; 0x1b44 <Decrement_Mode+0x2c0>
				{
					min--;
    1b38:	80 91 70 00 	lds	r24, 0x0070
    1b3c:	81 50       	subi	r24, 0x01	; 1
    1b3e:	80 93 70 00 	sts	0x0070, r24
    1b42:	1b c0       	rjmp	.+54     	; 0x1b7a <Decrement_Mode+0x2f6>
				}
				else if(min==0 && hr!=0)
    1b44:	80 91 70 00 	lds	r24, 0x0070
    1b48:	88 23       	and	r24, r24
    1b4a:	69 f4       	brne	.+26     	; 0x1b66 <Decrement_Mode+0x2e2>
    1b4c:	80 91 73 00 	lds	r24, 0x0073
    1b50:	88 23       	and	r24, r24
    1b52:	49 f0       	breq	.+18     	; 0x1b66 <Decrement_Mode+0x2e2>
			    {
			    	min=59;
    1b54:	8b e3       	ldi	r24, 0x3B	; 59
    1b56:	80 93 70 00 	sts	0x0070, r24
			    	hr--;
    1b5a:	80 91 73 00 	lds	r24, 0x0073
    1b5e:	81 50       	subi	r24, 0x01	; 1
    1b60:	80 93 73 00 	sts	0x0073, r24
    1b64:	0a c0       	rjmp	.+20     	; 0x1b7a <Decrement_Mode+0x2f6>
			    }
				else if(min==0 && hr==0)
    1b66:	80 91 70 00 	lds	r24, 0x0070
    1b6a:	88 23       	and	r24, r24
    1b6c:	31 f4       	brne	.+12     	; 0x1b7a <Decrement_Mode+0x2f6>
    1b6e:	80 91 73 00 	lds	r24, 0x0073
    1b72:	88 23       	and	r24, r24
    1b74:	11 f4       	brne	.+4      	; 0x1b7a <Decrement_Mode+0x2f6>
				{
					min=0;
    1b76:	10 92 70 00 	sts	0x0070, r1
				}
			    flag2=1;
    1b7a:	81 e0       	ldi	r24, 0x01	; 1
    1b7c:	80 93 6b 00 	sts	0x006B, r24
    1b80:	9f c0       	rjmp	.+318    	; 0x1cc0 <Decrement_Mode+0x43c>
			}
		}
		}
		else if(!(PINB & (1<<PB0))) //hours Decrement
    1b82:	e6 e3       	ldi	r30, 0x36	; 54
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	88 2f       	mov	r24, r24
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	81 70       	andi	r24, 0x01	; 1
    1b8e:	90 70       	andi	r25, 0x00	; 0
    1b90:	00 97       	sbiw	r24, 0x00	; 0
    1b92:	09 f0       	breq	.+2      	; 0x1b96 <Decrement_Mode+0x312>
    1b94:	93 c0       	rjmp	.+294    	; 0x1cbc <Decrement_Mode+0x438>
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	a0 e2       	ldi	r26, 0x20	; 32
    1b9c:	b1 e4       	ldi	r27, 0x41	; 65
    1b9e:	8b 87       	std	Y+11, r24	; 0x0b
    1ba0:	9c 87       	std	Y+12, r25	; 0x0c
    1ba2:	ad 87       	std	Y+13, r26	; 0x0d
    1ba4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1baa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	4a e7       	ldi	r20, 0x7A	; 122
    1bb4:	55 e4       	ldi	r21, 0x45	; 69
    1bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	8f 83       	std	Y+7, r24	; 0x07
    1bc0:	98 87       	std	Y+8, r25	; 0x08
    1bc2:	a9 87       	std	Y+9, r26	; 0x09
    1bc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc8:	78 85       	ldd	r23, Y+8	; 0x08
    1bca:	89 85       	ldd	r24, Y+9	; 0x09
    1bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	40 e8       	ldi	r20, 0x80	; 128
    1bd4:	5f e3       	ldi	r21, 0x3F	; 63
    1bd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bda:	88 23       	and	r24, r24
    1bdc:	2c f4       	brge	.+10     	; 0x1be8 <Decrement_Mode+0x364>
		__ticks = 1;
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	9e 83       	std	Y+6, r25	; 0x06
    1be4:	8d 83       	std	Y+5, r24	; 0x05
    1be6:	3f c0       	rjmp	.+126    	; 0x1c66 <Decrement_Mode+0x3e2>
	else if (__tmp > 65535)
    1be8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bea:	78 85       	ldd	r23, Y+8	; 0x08
    1bec:	89 85       	ldd	r24, Y+9	; 0x09
    1bee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	3f ef       	ldi	r19, 0xFF	; 255
    1bf4:	4f e7       	ldi	r20, 0x7F	; 127
    1bf6:	57 e4       	ldi	r21, 0x47	; 71
    1bf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bfc:	18 16       	cp	r1, r24
    1bfe:	4c f5       	brge	.+82     	; 0x1c52 <Decrement_Mode+0x3ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	40 e2       	ldi	r20, 0x20	; 32
    1c0e:	51 e4       	ldi	r21, 0x41	; 65
    1c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	bc 01       	movw	r22, r24
    1c1a:	cd 01       	movw	r24, r26
    1c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	9e 83       	std	Y+6, r25	; 0x06
    1c26:	8d 83       	std	Y+5, r24	; 0x05
    1c28:	0f c0       	rjmp	.+30     	; 0x1c48 <Decrement_Mode+0x3c4>
    1c2a:	80 e9       	ldi	r24, 0x90	; 144
    1c2c:	91 e0       	ldi	r25, 0x01	; 1
    1c2e:	9c 83       	std	Y+4, r25	; 0x04
    1c30:	8b 83       	std	Y+3, r24	; 0x03
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	9c 81       	ldd	r25, Y+4	; 0x04
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <Decrement_Mode+0x3b2>
    1c3a:	9c 83       	std	Y+4, r25	; 0x04
    1c3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c40:	9e 81       	ldd	r25, Y+6	; 0x06
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	9e 83       	std	Y+6, r25	; 0x06
    1c46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c48:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4c:	00 97       	sbiw	r24, 0x00	; 0
    1c4e:	69 f7       	brne	.-38     	; 0x1c2a <Decrement_Mode+0x3a6>
    1c50:	14 c0       	rjmp	.+40     	; 0x1c7a <Decrement_Mode+0x3f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c52:	6f 81       	ldd	r22, Y+7	; 0x07
    1c54:	78 85       	ldd	r23, Y+8	; 0x08
    1c56:	89 85       	ldd	r24, Y+9	; 0x09
    1c58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	9e 83       	std	Y+6, r25	; 0x06
    1c64:	8d 83       	std	Y+5, r24	; 0x05
    1c66:	8d 81       	ldd	r24, Y+5	; 0x05
    1c68:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6a:	9a 83       	std	Y+2, r25	; 0x02
    1c6c:	89 83       	std	Y+1, r24	; 0x01
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	9a 81       	ldd	r25, Y+2	; 0x02
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <Decrement_Mode+0x3ee>
    1c76:	9a 83       	std	Y+2, r25	; 0x02
    1c78:	89 83       	std	Y+1, r24	; 0x01
		{
			_delay_ms(10);
			 if(!(PINB & (1<<PB0))){
    1c7a:	e6 e3       	ldi	r30, 0x36	; 54
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	88 2f       	mov	r24, r24
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	81 70       	andi	r24, 0x01	; 1
    1c86:	90 70       	andi	r25, 0x00	; 0
    1c88:	00 97       	sbiw	r24, 0x00	; 0
    1c8a:	d1 f4       	brne	.+52     	; 0x1cc0 <Decrement_Mode+0x43c>
			if(flag2 == 0)
    1c8c:	80 91 6b 00 	lds	r24, 0x006B
    1c90:	88 23       	and	r24, r24
    1c92:	b1 f4       	brne	.+44     	; 0x1cc0 <Decrement_Mode+0x43c>
			{
				if(hr>0)
    1c94:	80 91 73 00 	lds	r24, 0x0073
    1c98:	88 23       	and	r24, r24
    1c9a:	31 f0       	breq	.+12     	; 0x1ca8 <Decrement_Mode+0x424>
				{
					hr--;
    1c9c:	80 91 73 00 	lds	r24, 0x0073
    1ca0:	81 50       	subi	r24, 0x01	; 1
    1ca2:	80 93 73 00 	sts	0x0073, r24
    1ca6:	06 c0       	rjmp	.+12     	; 0x1cb4 <Decrement_Mode+0x430>
				}
				else if(hr==0)
    1ca8:	80 91 73 00 	lds	r24, 0x0073
    1cac:	88 23       	and	r24, r24
    1cae:	11 f4       	brne	.+4      	; 0x1cb4 <Decrement_Mode+0x430>
				{
					hr=0;
    1cb0:	10 92 73 00 	sts	0x0073, r1
				}
			    flag2=1;
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	80 93 6b 00 	sts	0x006B, r24
    1cba:	02 c0       	rjmp	.+4      	; 0x1cc0 <Decrement_Mode+0x43c>
		}
		}
		else
		{
			// button is released reset the button flag to value 0 again.
			flag2 = 0;
    1cbc:	10 92 6b 00 	sts	0x006B, r1
		}
}
    1cc0:	aa 96       	adiw	r28, 0x2a	; 42
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	f8 94       	cli
    1cc6:	de bf       	out	0x3e, r29	; 62
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	cd bf       	out	0x3d, r28	; 61
    1ccc:	cf 91       	pop	r28
    1cce:	df 91       	pop	r29
    1cd0:	08 95       	ret

00001cd2 <Count_UP_Mode>:
void Count_UP_Mode(void)
{
    1cd2:	df 93       	push	r29
    1cd4:	cf 93       	push	r28
    1cd6:	cd b7       	in	r28, 0x3d	; 61
    1cd8:	de b7       	in	r29, 0x3e	; 62
	sec++;
    1cda:	80 91 6d 00 	lds	r24, 0x006D
    1cde:	8f 5f       	subi	r24, 0xFF	; 255
    1ce0:	80 93 6d 00 	sts	0x006D, r24
	if(sec>59)
    1ce4:	80 91 6d 00 	lds	r24, 0x006D
    1ce8:	8c 33       	cpi	r24, 0x3C	; 60
    1cea:	38 f0       	brcs	.+14     	; 0x1cfa <Count_UP_Mode+0x28>
	{
		sec=0;
    1cec:	10 92 6d 00 	sts	0x006D, r1
		min++;
    1cf0:	80 91 70 00 	lds	r24, 0x0070
    1cf4:	8f 5f       	subi	r24, 0xFF	; 255
    1cf6:	80 93 70 00 	sts	0x0070, r24
	}
	if(min>59)
    1cfa:	80 91 70 00 	lds	r24, 0x0070
    1cfe:	8c 33       	cpi	r24, 0x3C	; 60
    1d00:	38 f0       	brcs	.+14     	; 0x1d10 <Count_UP_Mode+0x3e>
	{
		min=0;
    1d02:	10 92 70 00 	sts	0x0070, r1
		hr++;
    1d06:	80 91 73 00 	lds	r24, 0x0073
    1d0a:	8f 5f       	subi	r24, 0xFF	; 255
    1d0c:	80 93 73 00 	sts	0x0073, r24
	}
	if(hr>24)
    1d10:	80 91 73 00 	lds	r24, 0x0073
    1d14:	89 31       	cpi	r24, 0x19	; 25
    1d16:	10 f0       	brcs	.+4      	; 0x1d1c <Count_UP_Mode+0x4a>
	{
		hr=0;
    1d18:	10 92 73 00 	sts	0x0073, r1
	}
}
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <Count_Down_Mode>:

void Count_Down_Mode(void)
{
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
	if(sec>0)
    1d2a:	80 91 6d 00 	lds	r24, 0x006D
    1d2e:	88 23       	and	r24, r24
    1d30:	31 f0       	breq	.+12     	; 0x1d3e <Count_Down_Mode+0x1c>
	{
	    sec--;
    1d32:	80 91 6d 00 	lds	r24, 0x006D
    1d36:	81 50       	subi	r24, 0x01	; 1
    1d38:	80 93 6d 00 	sts	0x006D, r24
    1d3c:	28 c0       	rjmp	.+80     	; 0x1d8e <Count_Down_Mode+0x6c>
	}
	else if(sec==0 && min>0)
    1d3e:	80 91 6d 00 	lds	r24, 0x006D
    1d42:	88 23       	and	r24, r24
    1d44:	69 f4       	brne	.+26     	; 0x1d60 <Count_Down_Mode+0x3e>
    1d46:	80 91 70 00 	lds	r24, 0x0070
    1d4a:	88 23       	and	r24, r24
    1d4c:	49 f0       	breq	.+18     	; 0x1d60 <Count_Down_Mode+0x3e>
	{
	    min--;
    1d4e:	80 91 70 00 	lds	r24, 0x0070
    1d52:	81 50       	subi	r24, 0x01	; 1
    1d54:	80 93 70 00 	sts	0x0070, r24
	    sec=59;
    1d58:	8b e3       	ldi	r24, 0x3B	; 59
    1d5a:	80 93 6d 00 	sts	0x006D, r24
    1d5e:	17 c0       	rjmp	.+46     	; 0x1d8e <Count_Down_Mode+0x6c>
	}
	else if(sec==0 && min==0 && hr>0)
    1d60:	80 91 6d 00 	lds	r24, 0x006D
    1d64:	88 23       	and	r24, r24
    1d66:	99 f4       	brne	.+38     	; 0x1d8e <Count_Down_Mode+0x6c>
    1d68:	80 91 70 00 	lds	r24, 0x0070
    1d6c:	88 23       	and	r24, r24
    1d6e:	79 f4       	brne	.+30     	; 0x1d8e <Count_Down_Mode+0x6c>
    1d70:	80 91 73 00 	lds	r24, 0x0073
    1d74:	88 23       	and	r24, r24
    1d76:	59 f0       	breq	.+22     	; 0x1d8e <Count_Down_Mode+0x6c>
	{
		hr--;
    1d78:	80 91 73 00 	lds	r24, 0x0073
    1d7c:	81 50       	subi	r24, 0x01	; 1
    1d7e:	80 93 73 00 	sts	0x0073, r24
		min=59;
    1d82:	8b e3       	ldi	r24, 0x3B	; 59
    1d84:	80 93 70 00 	sts	0x0070, r24
		sec=59;
    1d88:	8b e3       	ldi	r24, 0x3B	; 59
    1d8a:	80 93 6d 00 	sts	0x006D, r24
	}
	if(sec==0 && min==0 && hr==0)
    1d8e:	80 91 6d 00 	lds	r24, 0x006D
    1d92:	88 23       	and	r24, r24
    1d94:	79 f4       	brne	.+30     	; 0x1db4 <Count_Down_Mode+0x92>
    1d96:	80 91 70 00 	lds	r24, 0x0070
    1d9a:	88 23       	and	r24, r24
    1d9c:	59 f4       	brne	.+22     	; 0x1db4 <Count_Down_Mode+0x92>
    1d9e:	80 91 73 00 	lds	r24, 0x0073
    1da2:	88 23       	and	r24, r24
    1da4:	39 f4       	brne	.+14     	; 0x1db4 <Count_Down_Mode+0x92>
	{
		PORTD |= (1<<PD0); //BUZZER ON
    1da6:	a2 e3       	ldi	r26, 0x32	; 50
    1da8:	b0 e0       	ldi	r27, 0x00	; 0
    1daa:	e2 e3       	ldi	r30, 0x32	; 50
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	81 60       	ori	r24, 0x01	; 1
    1db2:	8c 93       	st	X, r24
	}
}
    1db4:	cf 91       	pop	r28
    1db6:	df 91       	pop	r29
    1db8:	08 95       	ret

00001dba <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
    1dba:	1f 92       	push	r1
    1dbc:	0f 92       	push	r0
    1dbe:	0f b6       	in	r0, 0x3f	; 63
    1dc0:	0f 92       	push	r0
    1dc2:	11 24       	eor	r1, r1
    1dc4:	2f 93       	push	r18
    1dc6:	3f 93       	push	r19
    1dc8:	4f 93       	push	r20
    1dca:	5f 93       	push	r21
    1dcc:	6f 93       	push	r22
    1dce:	7f 93       	push	r23
    1dd0:	8f 93       	push	r24
    1dd2:	9f 93       	push	r25
    1dd4:	af 93       	push	r26
    1dd6:	bf 93       	push	r27
    1dd8:	ef 93       	push	r30
    1dda:	ff 93       	push	r31
    1ddc:	df 93       	push	r29
    1dde:	cf 93       	push	r28
    1de0:	cd b7       	in	r28, 0x3d	; 61
    1de2:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    1de4:	80 91 68 00 	lds	r24, 0x0068
    1de8:	8f 5f       	subi	r24, 0xFF	; 255
    1dea:	80 93 68 00 	sts	0x0068, r24
	if(g_tick==NUMBER_OF_COMPARE_MTACHES_PER_SECOND)
    1dee:	80 91 68 00 	lds	r24, 0x0068
    1df2:	81 30       	cpi	r24, 0x01	; 1
    1df4:	69 f4       	brne	.+26     	; 0x1e10 <__vector_7+0x56>
	{
		if(flag3==0)
    1df6:	80 91 6c 00 	lds	r24, 0x006C
    1dfa:	88 23       	and	r24, r24
    1dfc:	29 f4       	brne	.+10     	; 0x1e08 <__vector_7+0x4e>
		{
			Count_UP_Mode();
    1dfe:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <Count_UP_Mode>
			g_tick=0;
    1e02:	10 92 68 00 	sts	0x0068, r1
    1e06:	04 c0       	rjmp	.+8      	; 0x1e10 <__vector_7+0x56>
		}
		else
		{
			Count_Down_Mode();
    1e08:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <Count_Down_Mode>
			g_tick=0;
    1e0c:	10 92 68 00 	sts	0x0068, r1
		}
	}
}
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	ff 91       	pop	r31
    1e16:	ef 91       	pop	r30
    1e18:	bf 91       	pop	r27
    1e1a:	af 91       	pop	r26
    1e1c:	9f 91       	pop	r25
    1e1e:	8f 91       	pop	r24
    1e20:	7f 91       	pop	r23
    1e22:	6f 91       	pop	r22
    1e24:	5f 91       	pop	r21
    1e26:	4f 91       	pop	r20
    1e28:	3f 91       	pop	r19
    1e2a:	2f 91       	pop	r18
    1e2c:	0f 90       	pop	r0
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	0f 90       	pop	r0
    1e32:	1f 90       	pop	r1
    1e34:	18 95       	reti

00001e36 <Timer1_CTC_Init>:
void Timer1_CTC_Init(void)
{
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;                          // initial value for timer
    1e3e:	ec e4       	ldi	r30, 0x4C	; 76
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	11 82       	std	Z+1, r1	; 0x01
    1e44:	10 82       	st	Z, r1
	/* Configure timer control register TCCR1A
	 * 1. Disconnect OC1A and OC1B  COM1A1=0 COM1A0=0 COM1B0=0 COM1B1=0
	 * 2. FOC1A=1 FOC1B=0
	 * 3. CTC Mode WGM10=0 WGM11=0 (Mode Number 4)
	 */
	TCCR1A |= (1<<FOC1A);
    1e46:	af e4       	ldi	r26, 0x4F	; 79
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	ef e4       	ldi	r30, 0x4F	; 79
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	88 60       	ori	r24, 0x08	; 8
    1e52:	8c 93       	st	X, r24
	/* Configure timer control register TCCR1B
	 * 1. CTC Mode WGM12=1 WGM13=0 (Mode Number 4)
	 * 2. Prescaler = F_CPU/1024 CS10=1 CS11=0 CS12=1
	 */
	TCCR1B |= (1<<WGM12) | (1<<CS12) |(1<<CS10);
    1e54:	ae e4       	ldi	r26, 0x4E	; 78
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	ee e4       	ldi	r30, 0x4E	; 78
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	8d 60       	ori	r24, 0x0D	; 13
    1e60:	8c 93       	st	X, r24
	OCR1A=15625;                         //set compare value
    1e62:	ea e4       	ldi	r30, 0x4A	; 74
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	89 e0       	ldi	r24, 0x09	; 9
    1e68:	9d e3       	ldi	r25, 0x3D	; 61
    1e6a:	91 83       	std	Z+1, r25	; 0x01
    1e6c:	80 83       	st	Z, r24
	TIMSK |= (1<<OCIE1A);                 // Enable Timer1 Compare A Interrupt
    1e6e:	a9 e5       	ldi	r26, 0x59	; 89
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e9 e5       	ldi	r30, 0x59	; 89
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	80 81       	ld	r24, Z
    1e78:	80 61       	ori	r24, 0x10	; 16
    1e7a:	8c 93       	st	X, r24
	TIFR |= (1<<OCF1A);
    1e7c:	a8 e5       	ldi	r26, 0x58	; 88
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e8 e5       	ldi	r30, 0x58	; 88
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	80 61       	ori	r24, 0x10	; 16
    1e88:	8c 93       	st	X, r24
}
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <Init_sevensegment>:

void Init_sevensegment(void)
{
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
	DDRC |= (0x0F);       // first 4 pins in PORTC output (sevensegments)
    1e98:	a4 e3       	ldi	r26, 0x34	; 52
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e4 e3       	ldi	r30, 0x34	; 52
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	8f 60       	ori	r24, 0x0F	; 15
    1ea4:	8c 93       	st	X, r24
	PORTC &= ~(0xF0);
    1ea6:	a5 e3       	ldi	r26, 0x35	; 53
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e5 e3       	ldi	r30, 0x35	; 53
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	8f 70       	andi	r24, 0x0F	; 15
    1eb2:	8c 93       	st	X, r24
	DDRA |= (0x3F);       //first 6 pins in PORTA are enable for the seven segments
    1eb4:	aa e3       	ldi	r26, 0x3A	; 58
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	ea e3       	ldi	r30, 0x3A	; 58
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	8f 63       	ori	r24, 0x3F	; 63
    1ec0:	8c 93       	st	X, r24

}
    1ec2:	cf 91       	pop	r28
    1ec4:	df 91       	pop	r29
    1ec6:	08 95       	ret

00001ec8 <LED_Init>:
void LED_Init(void)
{
    1ec8:	df 93       	push	r29
    1eca:	cf 93       	push	r28
    1ecc:	cd b7       	in	r28, 0x3d	; 61
    1ece:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1<<PD4);          // LED Indicators:Counting Up LED (Red)
    1ed0:	a1 e3       	ldi	r26, 0x31	; 49
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	e1 e3       	ldi	r30, 0x31	; 49
    1ed6:	f0 e0       	ldi	r31, 0x00	; 0
    1ed8:	80 81       	ld	r24, Z
    1eda:	80 61       	ori	r24, 0x10	; 16
    1edc:	8c 93       	st	X, r24
	DDRD |= (1<<PD5);          // LED Indicators:Counting Down LED (yellow)
    1ede:	a1 e3       	ldi	r26, 0x31	; 49
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e1 e3       	ldi	r30, 0x31	; 49
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	80 62       	ori	r24, 0x20	; 32
    1eea:	8c 93       	st	X, r24
	PORTD|=(1<<PD4);           //RED Led on
    1eec:	a2 e3       	ldi	r26, 0x32	; 50
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e2 e3       	ldi	r30, 0x32	; 50
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	80 61       	ori	r24, 0x10	; 16
    1ef8:	8c 93       	st	X, r24
	PORTD&=~(1<<PD5);          //YELLOW Led off
    1efa:	a2 e3       	ldi	r26, 0x32	; 50
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	e2 e3       	ldi	r30, 0x32	; 50
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	8f 7d       	andi	r24, 0xDF	; 223
    1f06:	8c 93       	st	X, r24
}
    1f08:	cf 91       	pop	r28
    1f0a:	df 91       	pop	r29
    1f0c:	08 95       	ret

00001f0e <Time_Adjustment>:
void Time_Adjustment(void)
{
    1f0e:	df 93       	push	r29
    1f10:	cf 93       	push	r28
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
	DDRB &= ~(1<<PB1);         // Hours Adjustment: Increment Hours
    1f16:	a7 e3       	ldi	r26, 0x37	; 55
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	e7 e3       	ldi	r30, 0x37	; 55
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	8d 7f       	andi	r24, 0xFD	; 253
    1f22:	8c 93       	st	X, r24
	DDRB &= ~(1<<PB0);         // Hours Adjustment: Decrement Hours
    1f24:	a7 e3       	ldi	r26, 0x37	; 55
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	e7 e3       	ldi	r30, 0x37	; 55
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	8e 7f       	andi	r24, 0xFE	; 254
    1f30:	8c 93       	st	X, r24
	DDRB &= ~(1<<PB4);         // Minutes Adjustment: Increment Minutes
    1f32:	a7 e3       	ldi	r26, 0x37	; 55
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	e7 e3       	ldi	r30, 0x37	; 55
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	8f 7e       	andi	r24, 0xEF	; 239
    1f3e:	8c 93       	st	X, r24
	DDRB &= ~(1<<PB3);         // Minutes Adjustment: Decrement Minutes
    1f40:	a7 e3       	ldi	r26, 0x37	; 55
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	e7 e3       	ldi	r30, 0x37	; 55
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	87 7f       	andi	r24, 0xF7	; 247
    1f4c:	8c 93       	st	X, r24
	DDRB &= ~(1<<PB6);         // Seconds Adjustment: Increment Seconds
    1f4e:	a7 e3       	ldi	r26, 0x37	; 55
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	e7 e3       	ldi	r30, 0x37	; 55
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	8f 7b       	andi	r24, 0xBF	; 191
    1f5a:	8c 93       	st	X, r24
	DDRB &= ~(1<<PB5);         // Seconds Adjustment: Decrement Seconds
    1f5c:	a7 e3       	ldi	r26, 0x37	; 55
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	e7 e3       	ldi	r30, 0x37	; 55
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	8f 7d       	andi	r24, 0xDF	; 223
    1f68:	8c 93       	st	X, r24
	// ALL by Internal pull up
	PORTB |=(1<<PB0) | (1<<PB1) | (1<<PB3) |(1<<PB4) | (1<<PB5) | (1<<PB6);
    1f6a:	a8 e3       	ldi	r26, 0x38	; 56
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e8 e3       	ldi	r30, 0x38	; 56
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	8b 67       	ori	r24, 0x7B	; 123
    1f76:	8c 93       	st	X, r24
}
    1f78:	cf 91       	pop	r28
    1f7a:	df 91       	pop	r29
    1f7c:	08 95       	ret

00001f7e <Alarm_Init>:
void Alarm_Init(void)
{
    1f7e:	df 93       	push	r29
    1f80:	cf 93       	push	r28
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1<<PD0);          // Alarm/Buzzer
    1f86:	a1 e3       	ldi	r26, 0x31	; 49
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e1 e3       	ldi	r30, 0x31	; 49
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	81 60       	ori	r24, 0x01	; 1
    1f92:	8c 93       	st	X, r24
	PORTD &= ~(1<<PD0);
    1f94:	a2 e3       	ldi	r26, 0x32	; 50
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	e2 e3       	ldi	r30, 0x32	; 50
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	8e 7f       	andi	r24, 0xFE	; 254
    1fa0:	8c 93       	st	X, r24
}
    1fa2:	cf 91       	pop	r28
    1fa4:	df 91       	pop	r29
    1fa6:	08 95       	ret

00001fa8 <Toggle_mode_Init>:
void Toggle_mode_Init(void)
{
    1fa8:	df 93       	push	r29
    1faa:	cf 93       	push	r28
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
	DDRB &= ~(1<<PB7);         // Mode Toggle Button
    1fb0:	a7 e3       	ldi	r26, 0x37	; 55
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e7 e3       	ldi	r30, 0x37	; 55
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	8f 77       	andi	r24, 0x7F	; 127
    1fbc:	8c 93       	st	X, r24
	PORTB |=(1<<PB7) ;         // Internal pull up
    1fbe:	a8 e3       	ldi	r26, 0x38	; 56
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e8 e3       	ldi	r30, 0x38	; 56
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	80 68       	ori	r24, 0x80	; 128
    1fca:	8c 93       	st	X, r24
}
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	08 95       	ret

00001fd2 <INT0_Init>:
void INT0_Init(void)
{
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
	DDRD &= ~(1<<PD2);                   // Reset Button
    1fda:	a1 e3       	ldi	r26, 0x31	; 49
    1fdc:	b0 e0       	ldi	r27, 0x00	; 0
    1fde:	e1 e3       	ldi	r30, 0x31	; 49
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	80 81       	ld	r24, Z
    1fe4:	8b 7f       	andi	r24, 0xFB	; 251
    1fe6:	8c 93       	st	X, r24
	PORTD |=(1<<PD2);                    // Internal pull up
    1fe8:	a2 e3       	ldi	r26, 0x32	; 50
    1fea:	b0 e0       	ldi	r27, 0x00	; 0
    1fec:	e2 e3       	ldi	r30, 0x32	; 50
    1fee:	f0 e0       	ldi	r31, 0x00	; 0
    1ff0:	80 81       	ld	r24, Z
    1ff2:	84 60       	ori	r24, 0x04	; 4
    1ff4:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC01);                 // Trigger INT0 with the falling edge
    1ff6:	a5 e5       	ldi	r26, 0x55	; 85
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	e5 e5       	ldi	r30, 0x55	; 85
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 81       	ld	r24, Z
    2000:	82 60       	ori	r24, 0x02	; 2
    2002:	8c 93       	st	X, r24
	GICR  |= (1<<INT0);                  // Enable external interrupt pin INT0
    2004:	ab e5       	ldi	r26, 0x5B	; 91
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	eb e5       	ldi	r30, 0x5B	; 91
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	80 64       	ori	r24, 0x40	; 64
    2010:	8c 93       	st	X, r24
}
    2012:	cf 91       	pop	r28
    2014:	df 91       	pop	r29
    2016:	08 95       	ret

00002018 <__vector_1>:
ISR(INT0_vect)
{
    2018:	1f 92       	push	r1
    201a:	0f 92       	push	r0
    201c:	0f b6       	in	r0, 0x3f	; 63
    201e:	0f 92       	push	r0
    2020:	11 24       	eor	r1, r1
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
	sec=0 ;
    202a:	10 92 6d 00 	sts	0x006D, r1
	sec_digit1 = 0 ;
    202e:	10 92 6e 00 	sts	0x006E, r1
	sec_digit2 = 0;
    2032:	10 92 6f 00 	sts	0x006F, r1
	min = 0 ;
    2036:	10 92 70 00 	sts	0x0070, r1
	min_digit1 = 0 ;
    203a:	10 92 71 00 	sts	0x0071, r1
	min_digit2 = 0;
    203e:	10 92 72 00 	sts	0x0072, r1
	hr = 0 ;
    2042:	10 92 73 00 	sts	0x0073, r1
	hr_digit1 = 0 ;
    2046:	10 92 74 00 	sts	0x0074, r1
	hr_digit2 = 0;
    204a:	10 92 75 00 	sts	0x0075, r1
}
    204e:	cf 91       	pop	r28
    2050:	df 91       	pop	r29
    2052:	0f 90       	pop	r0
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	0f 90       	pop	r0
    2058:	1f 90       	pop	r1
    205a:	18 95       	reti

0000205c <INT1_Init>:
void INT1_Init(void)
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
	DDRD&=~(1<<PD3);                     // Pause Button
    2064:	a1 e3       	ldi	r26, 0x31	; 49
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	e1 e3       	ldi	r30, 0x31	; 49
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	87 7f       	andi	r24, 0xF7	; 247
    2070:	8c 93       	st	X, r24
	MCUCR |= (1<<ISC11) | (1<<ISC10);    // Trigger INT1 with the raising edge
    2072:	a5 e5       	ldi	r26, 0x55	; 85
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	e5 e5       	ldi	r30, 0x55	; 85
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	8c 60       	ori	r24, 0x0C	; 12
    207e:	8c 93       	st	X, r24
	GICR  |= (1<<INT1);    // Enable external interrupt pin INT1
    2080:	ab e5       	ldi	r26, 0x5B	; 91
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	eb e5       	ldi	r30, 0x5B	; 91
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	80 68       	ori	r24, 0x80	; 128
    208c:	8c 93       	st	X, r24
}
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	08 95       	ret

00002094 <__vector_2>:
ISR(INT1_vect)
{
    2094:	1f 92       	push	r1
    2096:	0f 92       	push	r0
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	0f 92       	push	r0
    209c:	11 24       	eor	r1, r1
    209e:	8f 93       	push	r24
    20a0:	af 93       	push	r26
    20a2:	bf 93       	push	r27
    20a4:	ef 93       	push	r30
    20a6:	ff 93       	push	r31
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	cd b7       	in	r28, 0x3d	; 61
    20ae:	de b7       	in	r29, 0x3e	; 62
	TCCR1B &= ~(1<<CS10) & ~(1<<CS11) & ~(1<<CS12);  // No clock source (Timer/Counter stopped)
    20b0:	ae e4       	ldi	r26, 0x4E	; 78
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	ee e4       	ldi	r30, 0x4E	; 78
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	88 7f       	andi	r24, 0xF8	; 248
    20bc:	8c 93       	st	X, r24
}
    20be:	cf 91       	pop	r28
    20c0:	df 91       	pop	r29
    20c2:	ff 91       	pop	r31
    20c4:	ef 91       	pop	r30
    20c6:	bf 91       	pop	r27
    20c8:	af 91       	pop	r26
    20ca:	8f 91       	pop	r24
    20cc:	0f 90       	pop	r0
    20ce:	0f be       	out	0x3f, r0	; 63
    20d0:	0f 90       	pop	r0
    20d2:	1f 90       	pop	r1
    20d4:	18 95       	reti

000020d6 <INT2_Init>:
void INT2_Init(void)
{
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
	DDRB&=~(1<<PB2);                     // Resume Button
    20de:	a7 e3       	ldi	r26, 0x37	; 55
    20e0:	b0 e0       	ldi	r27, 0x00	; 0
    20e2:	e7 e3       	ldi	r30, 0x37	; 55
    20e4:	f0 e0       	ldi	r31, 0x00	; 0
    20e6:	80 81       	ld	r24, Z
    20e8:	8b 7f       	andi	r24, 0xFB	; 251
    20ea:	8c 93       	st	X, r24
	PORTB |=(1<<PB2);                    //Internal pull up
    20ec:	a8 e3       	ldi	r26, 0x38	; 56
    20ee:	b0 e0       	ldi	r27, 0x00	; 0
    20f0:	e8 e3       	ldi	r30, 0x38	; 56
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	84 60       	ori	r24, 0x04	; 4
    20f8:	8c 93       	st	X, r24
	MCUCSR &= ~(1<<ISC2) ;               // Trigger INT1 with the falling edge
    20fa:	a4 e5       	ldi	r26, 0x54	; 84
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e4 e5       	ldi	r30, 0x54	; 84
    2100:	f0 e0       	ldi	r31, 0x00	; 0
    2102:	80 81       	ld	r24, Z
    2104:	8f 7b       	andi	r24, 0xBF	; 191
    2106:	8c 93       	st	X, r24
	GICR  |= (1<<INT2);                  // Enable external interrupt pin INT2
    2108:	ab e5       	ldi	r26, 0x5B	; 91
    210a:	b0 e0       	ldi	r27, 0x00	; 0
    210c:	eb e5       	ldi	r30, 0x5B	; 91
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	80 81       	ld	r24, Z
    2112:	80 62       	ori	r24, 0x20	; 32
    2114:	8c 93       	st	X, r24
}
    2116:	cf 91       	pop	r28
    2118:	df 91       	pop	r29
    211a:	08 95       	ret

0000211c <__vector_3>:
ISR(INT2_vect)
{
    211c:	1f 92       	push	r1
    211e:	0f 92       	push	r0
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	0f 92       	push	r0
    2124:	11 24       	eor	r1, r1
    2126:	8f 93       	push	r24
    2128:	af 93       	push	r26
    212a:	bf 93       	push	r27
    212c:	ef 93       	push	r30
    212e:	ff 93       	push	r31
    2130:	df 93       	push	r29
    2132:	cf 93       	push	r28
    2134:	cd b7       	in	r28, 0x3d	; 61
    2136:	de b7       	in	r29, 0x3e	; 62
	TCCR1B |= (1<<CS10) | (1<<CS12);     //activate F_CPU/1024 CS10=1 CS11=0 CS12=1
    2138:	ae e4       	ldi	r26, 0x4E	; 78
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	ee e4       	ldi	r30, 0x4E	; 78
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	85 60       	ori	r24, 0x05	; 5
    2144:	8c 93       	st	X, r24
}
    2146:	cf 91       	pop	r28
    2148:	df 91       	pop	r29
    214a:	ff 91       	pop	r31
    214c:	ef 91       	pop	r30
    214e:	bf 91       	pop	r27
    2150:	af 91       	pop	r26
    2152:	8f 91       	pop	r24
    2154:	0f 90       	pop	r0
    2156:	0f be       	out	0x3f, r0	; 63
    2158:	0f 90       	pop	r0
    215a:	1f 90       	pop	r1
    215c:	18 95       	reti

0000215e <__udivmodqi4>:
    215e:	99 1b       	sub	r25, r25
    2160:	79 e0       	ldi	r23, 0x09	; 9
    2162:	04 c0       	rjmp	.+8      	; 0x216c <__udivmodqi4_ep>

00002164 <__udivmodqi4_loop>:
    2164:	99 1f       	adc	r25, r25
    2166:	96 17       	cp	r25, r22
    2168:	08 f0       	brcs	.+2      	; 0x216c <__udivmodqi4_ep>
    216a:	96 1b       	sub	r25, r22

0000216c <__udivmodqi4_ep>:
    216c:	88 1f       	adc	r24, r24
    216e:	7a 95       	dec	r23
    2170:	c9 f7       	brne	.-14     	; 0x2164 <__udivmodqi4_loop>
    2172:	80 95       	com	r24
    2174:	08 95       	ret

00002176 <__prologue_saves__>:
    2176:	2f 92       	push	r2
    2178:	3f 92       	push	r3
    217a:	4f 92       	push	r4
    217c:	5f 92       	push	r5
    217e:	6f 92       	push	r6
    2180:	7f 92       	push	r7
    2182:	8f 92       	push	r8
    2184:	9f 92       	push	r9
    2186:	af 92       	push	r10
    2188:	bf 92       	push	r11
    218a:	cf 92       	push	r12
    218c:	df 92       	push	r13
    218e:	ef 92       	push	r14
    2190:	ff 92       	push	r15
    2192:	0f 93       	push	r16
    2194:	1f 93       	push	r17
    2196:	cf 93       	push	r28
    2198:	df 93       	push	r29
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	ca 1b       	sub	r28, r26
    21a0:	db 0b       	sbc	r29, r27
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	09 94       	ijmp

000021ae <__epilogue_restores__>:
    21ae:	2a 88       	ldd	r2, Y+18	; 0x12
    21b0:	39 88       	ldd	r3, Y+17	; 0x11
    21b2:	48 88       	ldd	r4, Y+16	; 0x10
    21b4:	5f 84       	ldd	r5, Y+15	; 0x0f
    21b6:	6e 84       	ldd	r6, Y+14	; 0x0e
    21b8:	7d 84       	ldd	r7, Y+13	; 0x0d
    21ba:	8c 84       	ldd	r8, Y+12	; 0x0c
    21bc:	9b 84       	ldd	r9, Y+11	; 0x0b
    21be:	aa 84       	ldd	r10, Y+10	; 0x0a
    21c0:	b9 84       	ldd	r11, Y+9	; 0x09
    21c2:	c8 84       	ldd	r12, Y+8	; 0x08
    21c4:	df 80       	ldd	r13, Y+7	; 0x07
    21c6:	ee 80       	ldd	r14, Y+6	; 0x06
    21c8:	fd 80       	ldd	r15, Y+5	; 0x05
    21ca:	0c 81       	ldd	r16, Y+4	; 0x04
    21cc:	1b 81       	ldd	r17, Y+3	; 0x03
    21ce:	aa 81       	ldd	r26, Y+2	; 0x02
    21d0:	b9 81       	ldd	r27, Y+1	; 0x01
    21d2:	ce 0f       	add	r28, r30
    21d4:	d1 1d       	adc	r29, r1
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	f8 94       	cli
    21da:	de bf       	out	0x3e, r29	; 62
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	cd bf       	out	0x3d, r28	; 61
    21e0:	ed 01       	movw	r28, r26
    21e2:	08 95       	ret

000021e4 <_exit>:
    21e4:	f8 94       	cli

000021e6 <__stop_program>:
    21e6:	ff cf       	rjmp	.-2      	; 0x21e6 <__stop_program>
